// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

namespace Service.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220909161321_addTabUniteCat")]
    partial class addTabUniteCat
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Abonnement_ID");

                    b.Property<int?>("Abonnement_ISACTIVE");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AtelierID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("LieuStockage_ID");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nom_Complet")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("PointVente_ID");

                    b.Property<int?>("PositionVente_ID");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Abonnement_ID");

                    b.HasIndex("AtelierID");

                    b.HasIndex("LieuStockage_ID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PointVente_ID");

                    b.HasIndex("PositionVente_ID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Authentication.LogoUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abonnement_Id")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID");

                    b.ToTable("LogoUser");
                });

            modelBuilder.Entity("Domain.Entities.Abonnement_Client", b =>
                {
                    b.Property<int>("Abonnement_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abonnement_Adresse")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Abonnement_ContactEmail")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Abonnement_ContactNomPrenom")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Abonnement_ContactTelephone")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Abonnement_ICE")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Abonnement_IdentifiantFiscal")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Abonnement_IsActive");

                    b.Property<string>("Abonnement_Logo")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Abonnement_NomClient")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Abonnement_NomClientAR")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Abonnement_ONSSAAuthorisation")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Abonnement_RegistreCommercial")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Abonnement_Telephone")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Abonnement_VilleId");

                    b.HasKey("Abonnement_Id");

                    b.ToTable("Abonnement_Client");
                });

            modelBuilder.Entity("Domain.Entities.Affectation_Agent_Table", b =>
                {
                    b.Property<int>("Affectation_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Affectation_AgentId");

                    b.Property<int>("Affectation_IsActive")
                        .HasColumnType("int");

                    b.Property<int>("Affectation_TableId");

                    b.HasKey("Affectation_Id");

                    b.HasIndex("Affectation_AgentId");

                    b.HasIndex("Affectation_TableId");

                    b.ToTable("Affectation_Agent_Table");
                });

            modelBuilder.Entity("Domain.Entities.AgentServeur", b =>
                {
                    b.Property<int>("Agent_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Agent_AbonnementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agent_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Agent_IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Agent_NomPrenom")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Agent_PointVenteId")
                        .HasColumnType("int");

                    b.Property<string>("Agent_UtilisateurId")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Agent_Id");

                    b.ToTable("Agent_Serveur");
                });

            modelBuilder.Entity("Domain.Entities.Allergene", b =>
                {
                    b.Property<int>("Allergene_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Allergene_AbonnementId")
                        .HasColumnType("int");

                    b.Property<int>("Allergene_IsActive");

                    b.Property<string>("Allergene_Libelle")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Allergene_LibelleAR")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Allergene_Id");

                    b.ToTable("Allergene");
                });

            modelBuilder.Entity("Domain.Entities.AllimentationCaisse", b =>
                {
                    b.Property<int>("AllimentationCaisse_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllimentationCaisse_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AllimentationCaisse_DateCreation");

                    b.Property<int>("AllimentationCaisse_FlagCloture")
                        .HasColumnType("int");

                    b.Property<decimal>("AllimentationCaisse_Montant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AllimentationCaisse_PointVenteID")
                        .HasColumnType("int");

                    b.Property<int>("AllimentationCaisse_PositionVenteID");

                    b.Property<string>("AllimentationCaisse_UtilsateurID");

                    b.HasKey("AllimentationCaisse_ID");

                    b.HasIndex("AllimentationCaisse_PositionVenteID");

                    b.HasIndex("AllimentationCaisse_UtilsateurID");

                    b.ToTable("Allimentation_Caisse");
                });

            modelBuilder.Entity("Domain.Entities.Approvisionnement", b =>
                {
                    b.Property<int>("Approvisionnement_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Approvisionnement_AbonnementId")
                        .HasColumnType("int");

                    b.Property<int>("Approvisionnement_AtelierID");

                    b.Property<decimal>("Approvisionnement_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Approvisionnement_Date")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("Approvisionnement_DateModification")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("Approvisionnement_DateSaisie")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Approvisionnement_Etat")
                        .HasColumnType("int");

                    b.Property<int>("Approvisionnement_FormeProduitId");

                    b.Property<int>("Approvisionnement_PointVenteId");

                    b.Property<int>("Approvisionnement_ProduitApproID");

                    b.Property<int>("Approvisionnement_ProduitId");

                    b.Property<decimal>("Approvisionnement_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Approvisionnement_QuantiteRestante")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Approvisionnement_UtilisateurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Approvisionnement_ValideParId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Approvisionnement_Id");

                    b.HasIndex("Approvisionnement_AtelierID");

                    b.HasIndex("Approvisionnement_FormeProduitId");

                    b.HasIndex("Approvisionnement_PointVenteId");

                    b.HasIndex("Approvisionnement_ProduitApproID");

                    b.HasIndex("Approvisionnement_ProduitId");

                    b.ToTable("Approvisionnement");
                });

            modelBuilder.Entity("Domain.Entities.Approvisionnement_Matiere", b =>
                {
                    b.Property<int>("ApprovisionnementMatiere_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovisionnementMatiere_AbonnementID");

                    b.Property<int>("ApprovisionnementMatiere_AtelierID");

                    b.Property<DateTime>("ApprovisionnementMatiere_DateApprovisionnement")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("ApprovisionnementMatiere_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ApprovisionnementMatiere_Etat");

                    b.Property<int>("ApprovisionnementMatiere_MatiereStockID");

                    b.Property<decimal>("ApprovisionnementMatiere_Quantite")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ApprovisionnementMatiere_StockID");

                    b.Property<int>("ApprovisionnementMatiere_UniteID");

                    b.Property<string>("ApprovisionnementMatiere_Utilisateur");

                    b.Property<string>("ApprovisionnementMatiere_ValidéPar");

                    b.HasKey("ApprovisionnementMatiere_ID");

                    b.HasIndex("ApprovisionnementMatiere_AtelierID");

                    b.HasIndex("ApprovisionnementMatiere_MatiereStockID");

                    b.HasIndex("ApprovisionnementMatiere_StockID");

                    b.HasIndex("ApprovisionnementMatiere_UniteID");

                    b.ToTable("Approvisionnement_Matiere");
                });

            modelBuilder.Entity("Domain.Entities.Approvisionnement_ProduitConso", b =>
                {
                    b.Property<int>("ApprovisionnementProduit_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovisionnementProduit_AbonnementId");

                    b.Property<DateTime>("ApprovisionnementProduit_Date");

                    b.Property<DateTime>("ApprovisionnementProduit_DateCreation");

                    b.Property<DateTime?>("ApprovisionnementProduit_DateReception");

                    b.Property<string>("ApprovisionnementProduit_Etat");

                    b.Property<string>("ApprovisionnementProduit_LieuUserId");

                    b.Property<int>("ApprovisionnementProduit_PointVenteID");

                    b.Property<string>("ApprovisionnementProduit_PointVenteUserId");

                    b.Property<int>("ApprovisionnementProduit_ProduitStockageId");

                    b.Property<decimal>("ApprovisionnementProduit_Quantite");

                    b.Property<int>("ApprovisionnementProduit_StockID");

                    b.Property<int?>("ApprovisionnementProduit_UniteMesureId");

                    b.HasKey("ApprovisionnementProduit_Id");

                    b.HasIndex("ApprovisionnementProduit_PointVenteID");

                    b.HasIndex("ApprovisionnementProduit_ProduitStockageId");

                    b.HasIndex("ApprovisionnementProduit_StockID");

                    b.HasIndex("ApprovisionnementProduit_UniteMesureId");

                    b.ToTable("Approvisionnement_ProduitConsomable");
                });

            modelBuilder.Entity("Domain.Entities.Approvisionnement_ProduitPackage", b =>
                {
                    b.Property<int>("ApprovisionnementProduitPackage_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovisionnementProduitPackage_AbonnementId");

                    b.Property<int>("ApprovisionnementProduitPackage_AtelierID");

                    b.Property<DateTime>("ApprovisionnementProduitPackage_Date");

                    b.Property<int>("ApprovisionnementProduitPackage_PointVenteID");

                    b.Property<int>("ApprovisionnementProduitPackage_ProduitpackAtelierId");

                    b.Property<DateTime>("ApprovisionnementProduitPackage__DateCreation");

                    b.Property<DateTime?>("ApprovisionnementProduitPackage__DateReception");

                    b.Property<string>("ApprovisionnementProduitPackage__Etat");

                    b.Property<decimal>("ApprovisionnementProduitPackage__Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ApprovisionnementProduitPackage__UniteMesureId");

                    b.HasKey("ApprovisionnementProduitPackage_Id");

                    b.HasIndex("ApprovisionnementProduitPackage_AtelierID");

                    b.HasIndex("ApprovisionnementProduitPackage_PointVenteID");

                    b.HasIndex("ApprovisionnementProduitPackage_ProduitpackAtelierId");

                    b.HasIndex("ApprovisionnementProduitPackage__UniteMesureId");

                    b.ToTable("Approvisionnement_ProduitPackage");
                });

            modelBuilder.Entity("Domain.Entities.Article_BC", b =>
                {
                    b.Property<int>("ArticleBC_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleBC_BCID");

                    b.Property<string>("ArticleBC_Designation");

                    b.Property<int>("ArticleBC_MatiereID");

                    b.Property<decimal>("ArticleBC_PU");

                    b.Property<decimal>("ArticleBC_QteRest");

                    b.Property<decimal>("ArticleBC_Quantite");

                    b.Property<decimal>("ArticleBC_Total");

                    b.Property<int>("ArticleBC_UniteMesure");

                    b.HasKey("ArticleBC_ID");

                    b.HasIndex("ArticleBC_BCID");

                    b.HasIndex("ArticleBC_MatiereID");

                    b.HasIndex("ArticleBC_UniteMesure");

                    b.ToTable("Article_BC");
                });

            modelBuilder.Entity("Domain.Entities.Article_BL", b =>
                {
                    b.Property<int>("ArticleBL_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleBL_BonLivraisonID");

                    b.Property<DateTime?>("ArticleBL_DateLimiteConso");

                    b.Property<DateTime?>("ArticleBL_DateProduction");

                    b.Property<DateTime?>("ArticleBL_DateReception");

                    b.Property<string>("ArticleBL_Designation");

                    b.Property<string>("ArticleBL_LotFournisseur");

                    b.Property<string>("ArticleBL_LotTemp");

                    b.Property<int>("ArticleBL_MatiereID");

                    b.Property<decimal>("ArticleBL_PU");

                    b.Property<decimal>("ArticleBL_PrixTotal");

                    b.Property<decimal>("ArticleBL_Quantie");

                    b.Property<decimal>("ArticleBL_QuantieRes");

                    b.Property<string>("ArticleBL_Teemperature");

                    b.Property<int>("ArticleBL_UniteMesureID");

                    b.HasKey("ArticleBL_ID");

                    b.HasIndex("ArticleBL_BonLivraisonID");

                    b.HasIndex("ArticleBL_MatiereID");

                    b.HasIndex("ArticleBL_UniteMesureID");

                    b.ToTable("Article_BL");
                });

            modelBuilder.Entity("Domain.Entities.Atelier", b =>
                {
                    b.Property<int>("Atelier_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Atelier_AbonnementID")
                        .HasColumnType("int");

                    b.Property<string>("Atelier_Adresse")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Atelier_CodePostal")
                        .HasColumnType("int");

                    b.Property<DateTime>("Atelier_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Atelier_IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Atelier_Nom")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Atelier_NomResponsable")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Atelier_StockID");

                    b.Property<string>("Atelier_Telephone")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Atelier_UTILISATEUR")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Atelier_VilleID");

                    b.HasKey("Atelier_ID");

                    b.HasIndex("Atelier_StockID");

                    b.HasIndex("Atelier_VilleID");

                    b.ToTable("Atelier");
                });

            modelBuilder.Entity("Domain.Entities.Atelier_User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abonnement_ID");

                    b.Property<int>("Atelier_Id");

                    b.Property<int>("IsActive");

                    b.Property<string>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("Atelier_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Atelier_User");
                });

            modelBuilder.Entity("Domain.Entities.BonDeCommande", b =>
                {
                    b.Property<int>("BonDeCommande_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BonDeCommande_AbonnementID");

                    b.Property<string>("BonDeCommande_CreePar");

                    b.Property<DateTime>("BonDeCommande_DateCreation");

                    b.Property<DateTime?>("BonDeCommande_DateValidation");

                    b.Property<int>("BonDeCommande_FournisseurID");

                    b.Property<string>("BonDeCommande_Numero");

                    b.Property<string>("BonDeCommande_Statut");

                    b.Property<decimal>("BonDeCommande_TotalHT");

                    b.Property<decimal>("BonDeCommande_TotalTTC");

                    b.Property<decimal>("BonDeCommande_TotalTVA");

                    b.Property<string>("BonDeCommande_ValidéPar");

                    b.HasKey("BonDeCommande_ID");

                    b.HasIndex("BonDeCommande_AbonnementID");

                    b.HasIndex("BonDeCommande_FournisseurID");

                    b.ToTable("Bon_De_Commande");
                });

            modelBuilder.Entity("Domain.Entities.BonDeLivraison", b =>
                {
                    b.Property<int>("BonDeLivraison_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BonDeLivraison_AbonnementID");

                    b.Property<int>("BonDeLivraison_BCID");

                    b.Property<DateTime>("BonDeLivraison_DateLivraison");

                    b.Property<DateTime>("BonDeLivraison_DateSaisie");

                    b.Property<string>("BonDeLivraison_Designation");

                    b.Property<int?>("BonDeLivraison_FactureID");

                    b.Property<int?>("BonDeLivraison_StatutID");

                    b.Property<decimal>("BonDeLivraison_TotalHT");

                    b.Property<decimal>("BonDeLivraison_TotalTTC");

                    b.Property<decimal>("BonDeLivraison_TotalTVA");

                    b.HasKey("BonDeLivraison_ID");

                    b.HasIndex("BonDeLivraison_AbonnementID");

                    b.HasIndex("BonDeLivraison_BCID");

                    b.HasIndex("BonDeLivraison_FactureID");

                    b.HasIndex("BonDeLivraison_StatutID");

                    b.ToTable("Bon_De_Livraison");
                });

            modelBuilder.Entity("Domain.Entities.BonDeSortie", b =>
                {
                    b.Property<int>("BonDeSortie_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BonDeSortie_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BonDeSortie_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("BonDeSortie_DateProduction")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("BonDeSortie_Libelle")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("BonDeSortie_StockID");

                    b.HasKey("BonDeSortie_ID");

                    b.HasIndex("BonDeSortie_StockID");

                    b.ToTable("BonDe_Sortie");
                });

            modelBuilder.Entity("Domain.Entities.BonDetails", b =>
                {
                    b.Property<int>("BonDetails_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BonDeSortie_BonDeSortieID");

                    b.Property<int>("BonDeSortie_MatiereId");

                    b.Property<decimal>("BonDeSortie_Quantite")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("BonDeSortie_QuantiteDemandee")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("BonDeSortie_QuantiteEnStock")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("BonDeSortie_QuantiteLivree")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("BonDeSortie_UniteMesureId");

                    b.HasKey("BonDetails_ID");

                    b.HasIndex("BonDeSortie_BonDeSortieID");

                    b.HasIndex("BonDeSortie_MatiereId");

                    b.HasIndex("BonDeSortie_UniteMesureId");

                    b.ToTable("Bon_Details");
                });

            modelBuilder.Entity("Domain.Entities.ClotureJournee", b =>
                {
                    b.Property<int>("ClotueJournee_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClotueJournee_AbonnementID")
                        .HasColumnType("int");

                    b.Property<decimal>("ClotueJournee_Alimentation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ClotueJournee_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ClotueJournee_Description")
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("ClotueJournee_Montant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClotueJournee_PositionVenteID");

                    b.Property<decimal>("ClotueJournee_SoldeCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ClotueJournee_SoldeDebit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClotueJournee_UtilisateurID");

                    b.Property<int>("ClotueJournee_Valide")
                        .HasColumnType("int");

                    b.HasKey("ClotueJournee_ID");

                    b.HasIndex("ClotueJournee_PositionVenteID");

                    b.HasIndex("ClotueJournee_UtilisateurID");

                    b.ToTable("Cloture_Journee");
                });

            modelBuilder.Entity("Domain.Entities.Commande", b =>
                {
                    b.Property<int>("Commande_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Commande_AbonnementId")
                        .HasColumnType("int");

                    b.Property<decimal>("Commande_Avance")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("Commande_CaisseCommandeId")
                        .HasColumnType("int");

                    b.Property<int?>("Commande_CaissePayementId");

                    b.Property<DateTime>("Commande_Date")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("Commande_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("Commande_DateLivraisonPrevue")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Commande_EtatDeLivraison");

                    b.Property<int>("Commande_EtatDePaiement");

                    b.Property<decimal>("Commande_MontantSansRemise")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Commande_MontantTotal")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Commande_NomDemandeurs")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Commande_NumeroTel")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Commande_NumeroTicket")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("Commande_PointVenteId");

                    b.Property<decimal>("Commande_TauxdeRemise")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Commande_UtilisateurCommandeId");

                    b.Property<string>("Commande_UtilisateurLivraisonId")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Commande_Id");

                    b.HasIndex("Commande_CaissePayementId");

                    b.HasIndex("Commande_EtatDeLivraison");

                    b.HasIndex("Commande_EtatDePaiement");

                    b.HasIndex("Commande_UtilisateurCommandeId");

                    b.ToTable("Commande");
                });

            modelBuilder.Entity("Domain.Entities.Commande_Paiement", b =>
                {
                    b.Property<int>("CommandePaiement_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommandePaiement_CommandeID");

                    b.Property<DateTime>("CommandePaiement_DatePaiement")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CommandePaiement_FlagCloture")
                        .HasColumnType("int");

                    b.Property<int>("CommandePaiement_ModePaiementID");

                    b.Property<decimal>("CommandePaiement_Montant")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<int>("CommandePaiement_PositionVenteID");

                    b.Property<string>("CommandePaiement_UtilisateurID")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CommandePaiement_ID");

                    b.HasIndex("CommandePaiement_CommandeID");

                    b.HasIndex("CommandePaiement_ModePaiementID");

                    b.HasIndex("CommandePaiement_PositionVenteID");

                    b.ToTable("Commande_Paiement");
                });

            modelBuilder.Entity("Domain.Entities.CommandeDetail", b =>
                {
                    b.Property<int>("CommandeDetail_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommandeDetail_AbonnementId")
                        .HasColumnType("int");

                    b.Property<int>("CommandeDetail_CommandeId");

                    b.Property<decimal>("CommandeDetail_CoutdeRevient")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("CommandeDetail_FormeProduitId");

                    b.Property<decimal>("CommandeDetail_Marge")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("CommandeDetail_Prix")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("CommandeDetail_Quantite")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("CommandeDetail_UniteId");

                    b.HasKey("CommandeDetail_Id");

                    b.HasIndex("CommandeDetail_CommandeId");

                    b.HasIndex("CommandeDetail_FormeProduitId");

                    b.HasIndex("CommandeDetail_UniteId");

                    b.ToTable("Commande_Detail");
                });

            modelBuilder.Entity("Domain.Entities.Demande", b =>
                {
                    b.Property<int>("Demande_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Demande_AbonnementID")
                        .HasColumnType("int");

                    b.Property<int>("Demande_AtelierID");

                    b.Property<int?>("Demande_BonDeSortieID");

                    b.Property<DateTime>("Demande_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Demande_Etat")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Demande_LieuStockageID");

                    b.Property<string>("Demande_Motif")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Demande_PlanificationID");

                    b.Property<string>("Demande_Type")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Demande_UtilisateurID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Demande_ValideParID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Demande_ID");

                    b.HasIndex("Demande_AtelierID");

                    b.HasIndex("Demande_BonDeSortieID");

                    b.HasIndex("Demande_LieuStockageID");

                    b.HasIndex("Demande_PlanificationID");

                    b.ToTable("Demande");
                });

            modelBuilder.Entity("Domain.Entities.Demande_Pret", b =>
                {
                    b.Property<int>("DemandePret_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DemandePret_AbonnementID")
                        .HasColumnType("int");

                    b.Property<int>("DemandePret_AtelierID");

                    b.Property<DateTime>("DemandePret_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DemandePret_Etat")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("DemandePret_StockID");

                    b.HasKey("DemandePret_ID");

                    b.HasIndex("DemandePret_AtelierID");

                    b.HasIndex("DemandePret_StockID");

                    b.ToTable("Demande_Pret");
                });

            modelBuilder.Entity("Domain.Entities.DemandePret_Details", b =>
                {
                    b.Property<int>("DemandePretDetails_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DemandePretDetails_DemandeID");

                    b.Property<int>("DemandePretDetails_FormeID");

                    b.Property<int>("DemandePretDetails_ProduitID");

                    b.Property<decimal>("DemandePretDetails_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DemandePretDetails_QuantiteLivre")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DemandePretDetails_UniteMesureID");

                    b.HasKey("DemandePretDetails_ID");

                    b.HasIndex("DemandePretDetails_DemandeID");

                    b.HasIndex("DemandePretDetails_FormeID");

                    b.HasIndex("DemandePretDetails_ProduitID");

                    b.HasIndex("DemandePretDetails_UniteMesureID");

                    b.ToTable("DemandePret_Details");
                });

            modelBuilder.Entity("Domain.Entities.DetailsProduction", b =>
                {
                    b.Property<int>("ProductionDetails_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ProductionDetails_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductionDetails_FormeID");

                    b.Property<int>("ProductionDetails_ProductionID");

                    b.Property<decimal>("ProductionDetails_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductionDetails_Id");

                    b.HasIndex("ProductionDetails_FormeID");

                    b.HasIndex("ProductionDetails_ProductionID");

                    b.ToTable("Production_Details");
                });

            modelBuilder.Entity("Domain.Entities.DetailsProduitAppro", b =>
                {
                    b.Property<int>("DetailsProduitAppro_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("DetailsProduitAppro_PrixProduit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DetailsProduitAppro_ProduitApproID");

                    b.Property<decimal>("DetailsProduitAppro_QuantiteProduite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DetailsProduitAppro_ID");

                    b.HasIndex("DetailsProduitAppro_ProduitApproID");

                    b.ToTable("DetailsProduitAppro");
                });

            modelBuilder.Entity("Domain.Entities.Distributeur", b =>
                {
                    b.Property<int>("Distributeur_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Distributeur_AbonnementID");

                    b.Property<string>("Distributeur_Adresse");

                    b.Property<DateTime>("Distributeur_DateCreation");

                    b.Property<DateTime>("Distributeur_DateSaisie");

                    b.Property<int>("Distributeur_ICE");

                    b.Property<int>("Distributeur_IF");

                    b.Property<int>("Distributeur_IsActive");

                    b.Property<string>("Distributeur_NomContact");

                    b.Property<string>("Distributeur_RaisonSocial");

                    b.Property<string>("Distributeur_RaisonSocialAR");

                    b.Property<string>("Distributeur_Telephone");

                    b.HasKey("Distributeur_ID");

                    b.ToTable("Distributeur");
                });

            modelBuilder.Entity("Domain.Entities.Echange_Produits", b =>
                {
                    b.Property<int>("EchangeProduits_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EchangeProduits_AbonnementID")
                        .HasColumnType("int");

                    b.Property<string>("EchangeProduits_AdminID");

                    b.Property<DateTime>("EchangeProduits_DateEchange")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("EchangeProduits_PdvFournisseurID");

                    b.Property<string>("EchangeProduits_PdvFournisseurUserID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EchangeProduits_PdvRecepID");

                    b.Property<string>("EchangeProduits_PdvRecepUserID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EchangeProduits_Statut")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EchangeProduits_ID");

                    b.HasIndex("EchangeProduits_AdminID");

                    b.HasIndex("EchangeProduits_PdvFournisseurID");

                    b.HasIndex("EchangeProduits_PdvRecepID");

                    b.ToTable("Echange_Produits");
                });

            modelBuilder.Entity("Domain.Entities.EchangeProduit_Details", b =>
                {
                    b.Property<int>("EchangeProduitDetails_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EchangeProduitDetails_EchangeID");

                    b.Property<int>("EchangeProduitDetails_FromeID");

                    b.Property<int>("EchangeProduitDetails_ProduitID")
                        .HasColumnType("int");

                    b.Property<decimal>("EchangeProduitDetails_Quantite")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<int>("EchangeProduitDetails_UniteID");

                    b.HasKey("EchangeProduitDetails_ID");

                    b.HasIndex("EchangeProduitDetails_EchangeID");

                    b.HasIndex("EchangeProduitDetails_FromeID");

                    b.HasIndex("EchangeProduitDetails_UniteID");

                    b.ToTable("EchangeProduit_Details");
                });

            modelBuilder.Entity("Domain.Entities.Facture", b =>
                {
                    b.Property<int>("Facture_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Facture_AbonnementID");

                    b.Property<int>("Facture_BonDeCommandeID");

                    b.Property<DateTime>("Facture_DateFacture");

                    b.Property<DateTime>("Facture_DateSaisie");

                    b.Property<string>("Facture_Etat");

                    b.Property<int>("Facture_FournisseurID");

                    b.Property<decimal>("Facture_MontantTVA");

                    b.Property<string>("Facture_Numero");

                    b.Property<decimal>("Facture_TotalHT");

                    b.Property<decimal>("Facture_TotalTTC");

                    b.HasKey("Facture_ID");

                    b.HasIndex("Facture_BonDeCommandeID");

                    b.HasIndex("Facture_FournisseurID");

                    b.ToTable("Facture");
                });

            modelBuilder.Entity("Domain.Entities.FamilleProduit", b =>
                {
                    b.Property<int>("FamilleProduit_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FamilleProduit_AbonnemnetId");

                    b.Property<DateTime>("FamilleProduit_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FamilleProduit_Image")
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("FamilleProduit_IsActive");

                    b.Property<string>("FamilleProduit_Libelle")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("FamilleProduit_Id");

                    b.ToTable("Famille_Produit");
                });

            modelBuilder.Entity("Domain.Entities.FicheForme", b =>
                {
                    b.Property<int>("FicheForme_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("FicheForme_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FicheForme_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FicheForme_FicheBridge");

                    b.Property<int>("FicheForme_FormeProduit");

                    b.Property<int>("FicheForme_IsActive")
                        .HasColumnType("int");

                    b.Property<decimal>("FicheForme_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FicheForme_uniteMesure");

                    b.HasKey("FicheForme_ID");

                    b.HasIndex("FicheForme_FicheBridge");

                    b.HasIndex("FicheForme_FormeProduit");

                    b.HasIndex("FicheForme_uniteMesure");

                    b.ToTable("Fiche_Forme");
                });

            modelBuilder.Entity("Domain.Entities.FicheTech_ProduitBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abonnement_ID");

                    b.Property<int>("FicheTech_ID");

                    b.Property<int>("IsActive");

                    b.Property<int>("ProduitBase_ID");

                    b.Property<decimal>("ProduitQte");

                    b.Property<int>("UniteMesure_ID");

                    b.HasKey("Id");

                    b.HasIndex("FicheTech_ID");

                    b.HasIndex("ProduitBase_ID");

                    b.HasIndex("UniteMesure_ID");

                    b.ToTable("FicheTech_ProduitBase");
                });

            modelBuilder.Entity("Domain.Entities.FicheTechniqueBridge", b =>
                {
                    b.Property<int>("FicheTechniqueBridge_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FicheTechniqueBridge_AbonnementID")
                        .HasColumnType("int");

                    b.Property<decimal>("FicheTechniqueBridge_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FicheTechniqueBridge_CoutEmbalage");

                    b.Property<decimal?>("FicheTechniqueBridge_CoutMainOeuvre");

                    b.Property<DateTime>("FicheTechniqueBridge_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FicheTechniqueBridge_InUse")
                        .HasColumnType("bit");

                    b.Property<int>("FicheTechniqueBridge_IsActive")
                        .HasColumnType("int");

                    b.Property<string>("FicheTechniqueBridge_Libelle")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FicheTechniqueBridge_ProduitVendableID");

                    b.HasKey("FicheTechniqueBridge_ID");

                    b.HasIndex("FicheTechniqueBridge_ProduitVendableID");

                    b.ToTable("FicheTechnique_Bridge");
                });

            modelBuilder.Entity("Domain.Entities.FicheTechniqueProduitBase", b =>
                {
                    b.Property<int>("FicheTechniqueProduitBase_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FicheTechniqueProduitBase_AbonnementID")
                        .HasColumnType("int");

                    b.Property<decimal>("FicheTechniqueProduitBase_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FicheTechniqueProduitBase_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FicheTechniqueProduitBase_InUse")
                        .HasColumnType("bit");

                    b.Property<int>("FicheTechniqueProduitBase_IsActive")
                        .HasColumnType("int");

                    b.Property<string>("FicheTechniqueProduitBase_Libelle")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FicheTechniqueProduitBase_ProduitBaseID");

                    b.Property<decimal>("FicheTechniqueProduitBase_QuantiteProd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FicheTechniqueProduitBase_UniteMesureID");

                    b.HasKey("FicheTechniqueProduitBase_ID");

                    b.HasIndex("FicheTechniqueProduitBase_ProduitBaseID");

                    b.HasIndex("FicheTechniqueProduitBase_UniteMesureID");

                    b.ToTable("FicheTechniqueProduitBase");
                });

            modelBuilder.Entity("Domain.Entities.Fonction", b =>
                {
                    b.Property<int>("Fonction_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fonction_Libelle");

                    b.HasKey("Fonction_ID");

                    b.ToTable("Fonction");
                });

            modelBuilder.Entity("Domain.Entities.Forme_Produit", b =>
                {
                    b.Property<int>("FormeProduit_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormeProduit_AbonnementID")
                        .HasColumnType("int");

                    b.Property<decimal>("FormeProduit_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FormeProduit_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FormeProduit_Libelle")
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("FormeProduit_PrixVente")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FormeProduit_ProduitID");

                    b.Property<int?>("FormeProduit_ProduitPackageId");

                    b.Property<int?>("FormeProduit_ProduitPretId");

                    b.HasKey("FormeProduit_ID");

                    b.HasIndex("FormeProduit_ProduitID");

                    b.HasIndex("FormeProduit_ProduitPackageId");

                    b.HasIndex("FormeProduit_ProduitPretId");

                    b.ToTable("Forme_Produit");
                });

            modelBuilder.Entity("Domain.Entities.Forme_Stockage", b =>
                {
                    b.Property<int>("FormStockage_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormStockage_AbonnementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FormStockage_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FormStockage_Libelle")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("FormStockage_Id");

                    b.ToTable("Forme_Stockage");
                });

            modelBuilder.Entity("Domain.Entities.FormeDetails", b =>
                {
                    b.Property<int>("FormeDetails_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormeDetails_AbonnementID");

                    b.Property<DateTime>("FormeDetails_DateCreation");

                    b.Property<int>("FormeDetails_FormeProduitID");

                    b.Property<int>("FormeDetails_PointVenteID");

                    b.Property<int>("FormeDetails_ProduitPackageID");

                    b.Property<decimal>("FormeDetails_Quantite");

                    b.HasKey("FormeDetails_ID");

                    b.HasIndex("FormeDetails_FormeProduitID");

                    b.HasIndex("FormeDetails_PointVenteID");

                    b.HasIndex("FormeDetails_ProduitPackageID");

                    b.ToTable("FormeDetails");
                });

            modelBuilder.Entity("Domain.Entities.Fournisseur", b =>
                {
                    b.Property<int>("Founisseur_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Founisseur_AbonnementId")
                        .HasColumnType("int");

                    b.Property<string>("Founisseur_Adresse")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("Founisseur_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("Founisseur_DateSaisie")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Founisseur_ICE")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Founisseur_IsActive");

                    b.Property<string>("Founisseur_NomContact")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Founisseur_RaisonSocial")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Founisseur_Telephone")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Founisseur_UtilisateurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Founisseur_VilleID");

                    b.HasKey("Founisseur_Id");

                    b.HasIndex("Founisseur_VilleID");

                    b.ToTable("Founisseur");
                });

            modelBuilder.Entity("Domain.Entities.Fournisseur_ProduitConso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abonnement_Id");

                    b.Property<int>("FournisseurProduits_Id");

                    b.Property<int>("IsActive");

                    b.Property<int>("ProduitConsomable_Id");

                    b.HasKey("Id");

                    b.HasIndex("FournisseurProduits_Id");

                    b.HasIndex("ProduitConsomable_Id");

                    b.ToTable("Fournisseur_ProduitConso");
                });

            modelBuilder.Entity("Domain.Entities.FournisseurContact", b =>
                {
                    b.Property<int>("FournisseurContact_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FournisseurContact_Email")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FournisseurContact_FonctionID");

                    b.Property<int?>("FournisseurContact_FournisseurID");

                    b.Property<int?>("FournisseurContact_FournisseurProduitID");

                    b.Property<string>("FournisseurContact_GSM")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FournisseurContact_Nom")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("FournisseurContact_ID");

                    b.HasIndex("FournisseurContact_FonctionID");

                    b.HasIndex("FournisseurContact_FournisseurID");

                    b.HasIndex("FournisseurContact_FournisseurProduitID");

                    b.ToTable("Fournisseur_Contact");
                });

            modelBuilder.Entity("Domain.Entities.FournisseurMatiere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abonnement_ID");

                    b.Property<int>("Founisseur_Id");

                    b.Property<int>("IsActive");

                    b.Property<int>("MatierePremiere_Id");

                    b.HasKey("Id");

                    b.HasIndex("Founisseur_Id");

                    b.HasIndex("MatierePremiere_Id");

                    b.ToTable("FournisseurMatiere");
                });

            modelBuilder.Entity("Domain.Entities.FournisseurProduits", b =>
                {
                    b.Property<int>("FournisseurProduitConso_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FournisseurProduitConso_AbonnementID");

                    b.Property<string>("FournisseurProduitConso_Adresse");

                    b.Property<DateTime>("FournisseurProduitConso_DateCreation");

                    b.Property<string>("FournisseurProduitConso_ICE");

                    b.Property<int>("FournisseurProduitConso_IsActive");

                    b.Property<string>("FournisseurProduitConso_NomContact");

                    b.Property<string>("FournisseurProduitConso_RaisonSocial");

                    b.Property<string>("FournisseurProduitConso_TelephoneContact");

                    b.Property<string>("FournisseurProduitConso_UtilisateurId");

                    b.Property<int>("FournisseurProduitConso_VilleID");

                    b.HasKey("FournisseurProduitConso_Id");

                    b.HasIndex("FournisseurProduitConso_VilleID");

                    b.ToTable("Fournisseur_Produits");
                });

            modelBuilder.Entity("Domain.Entities.Gratuite", b =>
                {
                    b.Property<int>("Gratuite_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Gratuite_AbonnementID")
                        .HasColumnType("int");

                    b.Property<decimal>("Gratuite_CoutDeRevientTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Gratuite_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Gratuite_PositionVente");

                    b.Property<string>("Gratuite_UtilisateurID")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Gratuite_ID");

                    b.HasIndex("Gratuite_PositionVente");

                    b.ToTable("Gratuite");
                });

            modelBuilder.Entity("Domain.Entities.GratuiteDetails", b =>
                {
                    b.Property<int>("GratuiteDetails_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("GratuiteDetails_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("GratuiteDetails_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("GratuiteDetails_FormeID");

                    b.Property<int>("GratuiteDetails_GratuiteID");

                    b.Property<decimal>("GratuiteDetails_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GratuiteDetails_UniteVenteID");

                    b.HasKey("GratuiteDetails_ID");

                    b.HasIndex("GratuiteDetails_FormeID");

                    b.HasIndex("GratuiteDetails_GratuiteID");

                    b.HasIndex("GratuiteDetails_UniteVenteID");

                    b.ToTable("GratuiteDetails");
                });

            modelBuilder.Entity("Domain.Entities.Lieu_Stockage", b =>
                {
                    b.Property<int>("LieuStockag_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LieuStockag_AbonnementId")
                        .HasColumnType("int");

                    b.Property<string>("LieuStockag_Adresse")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("LieuStockag_CodePostal")
                        .HasColumnType("int");

                    b.Property<DateTime>("LieuStockag_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("LieuStockag_IsActive");

                    b.Property<string>("LieuStockag_Nom")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LieuStockag_NomResponsable")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("LieuStockag_ParDefaut")
                        .HasColumnType("int");

                    b.Property<string>("LieuStockag_Telephone")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LieuStockag_UTILISATEUR")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LieuStockag_VilleID");

                    b.HasKey("LieuStockag_Id");

                    b.HasIndex("LieuStockag_VilleID");

                    b.ToTable("Lieu_Stockage");
                });

            modelBuilder.Entity("Domain.Entities.Matiere_Composants", b =>
                {
                    b.Property<int>("MatiereComposants_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatiereComposants_AbonnementID");

                    b.Property<int>("MatiereComposants_IsActive");

                    b.Property<int>("MatiereComposants_MatiereID");

                    b.Property<string>("MatiereComposants_Name");

                    b.Property<string>("MatiereComposants_NameAR");

                    b.Property<string>("MatiereComposants_Valeur");

                    b.HasKey("MatiereComposants_ID");

                    b.HasIndex("MatiereComposants_MatiereID");

                    b.ToTable("Matiere_Composants");
                });

            modelBuilder.Entity("Domain.Entities.Matiere_Transfert", b =>
                {
                    b.Property<int>("MatiereTrans_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("MatiereTrans_DateValidation");

                    b.Property<string>("MatiereTrans_LotNumber");

                    b.Property<int>("MatiereTrans_MatiereID");

                    b.Property<decimal>("MatiereTrans_Quantite");

                    b.Property<string>("MatiereTrans_Statut");

                    b.Property<int>("MatiereTrans_StockID");

                    b.Property<int>("MatiereTrans_TransferID");

                    b.Property<int>("MatiereTrans_UniteID");

                    b.Property<string>("MatiereTrans_ValidePar");

                    b.HasKey("MatiereTrans_ID");

                    b.HasIndex("MatiereTrans_MatiereID");

                    b.HasIndex("MatiereTrans_StockID");

                    b.HasIndex("MatiereTrans_TransferID");

                    b.HasIndex("MatiereTrans_UniteID");

                    b.ToTable("Matiere_Transfert");
                });

            modelBuilder.Entity("Domain.Entities.MatiereFamille", b =>
                {
                    b.Property<int>("MatiereFamille_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatiereFamille_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatiereFamille_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("MatiereFamille_IsActive")
                        .HasColumnType("int");

                    b.Property<string>("MatiereFamille_Libelle")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MatiereFamille_ParentID");

                    b.HasKey("MatiereFamille_ID");

                    b.HasIndex("MatiereFamille_ParentID");

                    b.ToTable("Matiere_Famille");
                });

            modelBuilder.Entity("Domain.Entities.MatierePremiere", b =>
                {
                    b.Property<int>("MatierePremiere_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EnStock");

                    b.Property<int>("MatierePremiere_AbonnementId")
                        .HasColumnType("int");

                    b.Property<int>("MatierePremiere_AchatUniteMesureId");

                    b.Property<string>("MatierePremiere_CodeArticle")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MatierePremiere_Composants")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("MatierePremiere_CoutTVAID");

                    b.Property<DateTime>("MatierePremiere_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("MatierePremiere_EstAllergene")
                        .HasColumnType("int");

                    b.Property<int>("MatierePremiere_FamilleID");

                    b.Property<int?>("MatierePremiere_FormeStockageId");

                    b.Property<int>("MatierePremiere_IsActive");

                    b.Property<string>("MatierePremiere_Libelle")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MatierePremiere_LibelleAR")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MatierePremiere_LibelleEN")
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("MatierePremiere_PourcentrageTolerancePerte")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("MatierePremiere_PrixMoyenAchat")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MatierePremiere_QuantiteActuelle")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MatierePremiere_Quantite_FT")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("MatierePremiere_UniteMesureId_FT")
                        .HasColumnType("int");

                    b.HasKey("MatierePremiere_Id");

                    b.HasIndex("MatierePremiere_AchatUniteMesureId");

                    b.HasIndex("MatierePremiere_CoutTVAID");

                    b.HasIndex("MatierePremiere_FamilleID");

                    b.HasIndex("MatierePremiere_FormeStockageId");

                    b.ToTable("Matiere_Premiere");
                });

            modelBuilder.Entity("Domain.Entities.MatierePremiereStockage", b =>
                {
                    b.Property<int>("MatierePremiereStokage_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatierePremiereStokage_AbonnementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatierePremiereStokage_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("MatierePremiereStokage_IsActive");

                    b.Property<int>("MatierePremiereStokage_MatierePremiereId");

                    b.Property<decimal>("MatierePremiereStokage_QuantiteActuelle");

                    b.Property<int>("MatierePremiereStokage_SectionStockageId");

                    b.Property<decimal>("MatierePremiereStokage_StockMaximum")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MatierePremiereStokage_StockMinimum")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("MatierePremiereStokage_Id");

                    b.HasIndex("MatierePremiereStokage_MatierePremiereId");

                    b.HasIndex("MatierePremiereStokage_SectionStockageId");

                    b.ToTable("MatierePremiere_Stokage");
                });

            modelBuilder.Entity("Domain.Entities.MatiereStock_Atelier", b =>
                {
                    b.Property<int>("MatiereStockAtelier_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatiereStockAtelier_AbonnementID")
                        .HasColumnType("int");

                    b.Property<int>("MatiereStockAtelier_AtelierID");

                    b.Property<DateTime>("MatiereStockAtelier_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("MatiereStockAtelier_MatierePremiereID");

                    b.Property<decimal>("MatiereStockAtelier_QauntiteActuelle")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("MatiereStockAtelier_QuatiteAvecPlanification")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("MatiereStockAtelier_ID");

                    b.HasIndex("MatiereStockAtelier_AtelierID");

                    b.HasIndex("MatiereStockAtelier_MatierePremiereID");

                    b.ToTable("matiereStock_Atelier");
                });

            modelBuilder.Entity("Domain.Entities.MatireFamille_Parent", b =>
                {
                    b.Property<int>("MatiereFamilleParent_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatiereFamilleParent_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatiereFamilleParent_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("MatiereFamilleParent_IsActive")
                        .HasColumnType("int");

                    b.Property<string>("MatiereFamilleParent_Libelle")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("MatiereFamilleParent_ID");

                    b.ToTable("MatiereFamille_Parent");
                });

            modelBuilder.Entity("Domain.Entities.MatPrem_Allergene", b =>
                {
                    b.Property<int>("MatPrem_AleergID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbonnementID");

                    b.Property<int>("AllergenID");

                    b.Property<int>("IsActive");

                    b.Property<int>("MatiereID");

                    b.HasKey("MatPrem_AleergID");

                    b.HasIndex("AllergenID");

                    b.HasIndex("MatiereID");

                    b.ToTable("MatPrem_Allergene");
                });

            modelBuilder.Entity("Domain.Entities.ModePaiement", b =>
                {
                    b.Property<int>("ModePaiement_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModePaiement_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ModePaiement_Id");

                    b.ToTable("Mode_Paiement");
                });

            modelBuilder.Entity("Domain.Entities.MouvementCaisse", b =>
                {
                    b.Property<int>("MouvementsCaisse_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MouvementsCaisse_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("MouvementsCaisse_DateMouvement")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("MouvementsCaisse_Montant")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("MouvementsCaisse_PositionVenteID");

                    b.Property<int>("MouvementsCaisse_TypeID");

                    b.Property<string>("MouvementsCaisse_UtilisateurID")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("MouvementsCaisse_ID");

                    b.HasIndex("MouvementsCaisse_PositionVenteID");

                    b.HasIndex("MouvementsCaisse_TypeID");

                    b.ToTable("Mouvements_Caisse");
                });

            modelBuilder.Entity("Domain.Entities.MouvementCaisse_Type", b =>
                {
                    b.Property<int>("TypeMouvementCaisse_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeMouvementCaisse_Libelle")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TypeMouvementCaisse_ID");

                    b.ToTable("MouvementCaisse_Type");
                });

            modelBuilder.Entity("Domain.Entities.MouvementProduitsConso", b =>
                {
                    b.Property<int>("MouvementProduitsConso_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MouvementProduitsConso_AbonnementID");

                    b.Property<DateTime>("MouvementProduitsConso_DateMouvement");

                    b.Property<int>("MouvementProduitsConso_FournisseurProduitId");

                    b.Property<int>("MouvementProduitsConso_IsActive");

                    b.Property<int>("MouvementProduitsConso_MouvementType");

                    b.Property<int>("MouvementProduitsConso_ProduitConsoId");

                    b.Property<decimal>("MouvementProduitsConso_Quantite");

                    b.Property<decimal>("MouvementProduitsConso_QuantiteActuelle");

                    b.Property<bool>("MouvementProduitsConso_ReceptionStatut");

                    b.Property<int?>("MouvementProduitsConso_ReceptionStockId");

                    b.Property<string>("MouvementProduitsConso_ReceptionUtilisateur");

                    b.Property<int?>("MouvementProduitsConso_StockFournisseurId");

                    b.Property<int>("MouvementProduitsConso_UniteMesureId");

                    b.Property<string>("MouvementProduitsConso_Utilisateur");

                    b.HasKey("MouvementProduitsConso_Id");

                    b.HasIndex("MouvementProduitsConso_FournisseurProduitId");

                    b.HasIndex("MouvementProduitsConso_MouvementType");

                    b.HasIndex("MouvementProduitsConso_ProduitConsoId");

                    b.HasIndex("MouvementProduitsConso_StockFournisseurId");

                    b.HasIndex("MouvementProduitsConso_UniteMesureId");

                    b.ToTable("Mouvement_ProduitsConso");
                });

            modelBuilder.Entity("Domain.Entities.MouvementStock", b =>
                {
                    b.Property<int>("MouvementStock_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MouvementStock_AbonnementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MouvementStock_Date")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("MouvementStock_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("MouvementStock_DateReception")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("MouvementStock_DateSaisie")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("MouvementStock_DestinationStockId");

                    b.Property<int?>("MouvementStock_FournisseurId");

                    b.Property<int>("MouvementStock_IsActive")
                        .HasColumnType("int");

                    b.Property<int>("MouvementStock_MatierePremiereStokageId");

                    b.Property<decimal>("MouvementStock_MatiereQuantiteActuelle")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MouvementStock_MouvementTypeId");

                    b.Property<decimal>("MouvementStock_PrixAchatUnite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MouvementStock_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("MouvementStock_ReceptionStatutId")
                        .HasColumnType("bit");

                    b.Property<int>("MouvementStock_UniteMesureId");

                    b.HasKey("MouvementStock_Id");

                    b.HasIndex("MouvementStock_DestinationStockId");

                    b.HasIndex("MouvementStock_FournisseurId");

                    b.HasIndex("MouvementStock_MatierePremiereStokageId");

                    b.HasIndex("MouvementStock_MouvementTypeId");

                    b.HasIndex("MouvementStock_UniteMesureId");

                    b.ToTable("Mouvement_Stock");
                });

            modelBuilder.Entity("Domain.Entities.MouvementType", b =>
                {
                    b.Property<int>("MouvementType_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MouvementType_AbonnementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MouvementType_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("MouvementType_Libelle")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("MouvementType_Id");

                    b.ToTable("Mouvement_Type");
                });

            modelBuilder.Entity("Domain.Entities.Package_Forme", b =>
                {
                    b.Property<int>("PackageForme_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PackageForme_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PackageForme_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PackageForme_FormeProduitID");

                    b.Property<bool>("PackageForme_IsInUse")
                        .HasColumnType("bit");

                    b.Property<int>("PackageForme_ProduitPackageID");

                    b.HasKey("PackageForme_ID");

                    b.HasIndex("PackageForme_FormeProduitID");

                    b.HasIndex("PackageForme_ProduitPackageID");

                    b.ToTable("Package_Forme");
                });

            modelBuilder.Entity("Domain.Entities.PackageForme_Details", b =>
                {
                    b.Property<int>("PackageFormeDetails_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("PackageFormeDetails_CoutdeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PackageFormeDetails_PackageFormeID");

                    b.Property<decimal>("PackageFormeDetails_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PackageFormeDetails_SousProduitID");

                    b.HasKey("PackageFormeDetails_ID");

                    b.HasIndex("PackageFormeDetails_PackageFormeID");

                    b.HasIndex("PackageFormeDetails_SousProduitID");

                    b.ToTable("PackageForme_Details");
                });

            modelBuilder.Entity("Domain.Entities.PackageFormeDetails_Matiere", b =>
                {
                    b.Property<int>("PackageFormeDetailsMatiere_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("PackageFormeDetailsMatiere_CoutDeRevient")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PackageFormeDetailsMatiere_PackageFormeID");

                    b.Property<decimal>("PackageFormeDetailsMatiere_Quantite")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PackageFormeDetailsMatiere_SousMatiereID");

                    b.Property<int>("PackageFormeDetailsMatiere_UniteMesureID");

                    b.HasKey("PackageFormeDetailsMatiere_ID");

                    b.HasIndex("PackageFormeDetailsMatiere_PackageFormeID");

                    b.HasIndex("PackageFormeDetailsMatiere_SousMatiereID");

                    b.HasIndex("PackageFormeDetailsMatiere_UniteMesureID");

                    b.ToTable("PackageFormeDetailsMatiere");
                });

            modelBuilder.Entity("Domain.Entities.PackageProduction", b =>
                {
                    b.Property<int>("PackageProduction_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PackageProduction_AbonnementID");

                    b.Property<DateTime>("PackageProduction_DateCreation");

                    b.Property<int>("PackageProduction_ProduitID");

                    b.Property<int>("PackageProduction_ProduitPackageID");

                    b.Property<decimal>("PackageProduction_Quantite");

                    b.Property<string>("PackageProduction_UtilisateurID");

                    b.HasKey("PackageProduction_ID");

                    b.HasIndex("PackageProduction_ProduitID");

                    b.HasIndex("PackageProduction_ProduitPackageID");

                    b.ToTable("Package_Production");
                });

            modelBuilder.Entity("Domain.Entities.Paiement_Abonnement", b =>
                {
                    b.Property<int>("PaiementAbonnement_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PaiementAbonnement_AbonnementId");

                    b.Property<string>("PaiementAbonnement_AdminUserId")
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime?>("PaiementAbonnement_Date")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("PaiementAbonnement_DateDebutPeriode")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("PaiementAbonnement_DateFinPeriode")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("PaiementAbonnement_DateSaisie")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("PaiementAbonnement_Montant")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("PaiementAbonnement_PeriodeDePaiement")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("PaiementAbonnement_PointVenteID");

                    b.HasKey("PaiementAbonnement_ID");

                    b.HasIndex("PaiementAbonnement_AbonnementId");

                    b.HasIndex("PaiementAbonnement_PointVenteID");

                    b.ToTable("Paiement_Abonnement");
                });

            modelBuilder.Entity("Domain.Entities.Payement_Facture", b =>
                {
                    b.Property<int>("PayementFacture_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PayementFacture_AbonnementID");

                    b.Property<string>("PayementFacture_CreePar");

                    b.Property<DateTime?>("PayementFacture_DateEcheance");

                    b.Property<DateTime?>("PayementFacture_DatePayement");

                    b.Property<DateTime?>("PayementFacture_DateSaisie");

                    b.Property<int>("PayementFacture_FactureID");

                    b.Property<string>("PayementFacture_Informations");

                    b.Property<string>("PayementFacture_Methode");

                    b.Property<decimal>("PayementFacture_Montant");

                    b.HasKey("PayementFacture_ID");

                    b.HasIndex("PayementFacture_FactureID");

                    b.ToTable("Payement_Facture");
                });

            modelBuilder.Entity("Domain.Entities.PdV_ProduitsPret", b =>
                {
                    b.Property<int>("PdV_ProduitsPret_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PdV_ProduitsPret_AbonnementId");

                    b.Property<DateTime>("PdV_ProduitsPret_DateModification");

                    b.Property<int>("PdV_ProduitsPret_FormeProduitId");

                    b.Property<int>("PdV_ProduitsPret_PointVenteId");

                    b.Property<int>("PdV_ProduitsPret_ProduitConsomableId");

                    b.Property<decimal>("PdV_ProduitsPret_Quantite");

                    b.HasKey("PdV_ProduitsPret_Id");

                    b.HasIndex("PdV_ProduitsPret_FormeProduitId");

                    b.HasIndex("PdV_ProduitsPret_PointVenteId");

                    b.HasIndex("PdV_ProduitsPret_ProduitConsomableId");

                    b.ToTable("PdV_ProduitsPret");
                });

            modelBuilder.Entity("Domain.Entities.Perte", b =>
                {
                    b.Property<int>("Perte_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Perte_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Perte_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("Perte_DatePerte")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Perte_PositionVenteID");

                    b.Property<string>("Perte_UtilisateurID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Perte_ValeurTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Perte_ID");

                    b.HasIndex("Perte_PositionVenteID");

                    b.ToTable("Perte");
                });

            modelBuilder.Entity("Domain.Entities.Perte_Matiere", b =>
                {
                    b.Property<int>("PerteMatiere_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PerteMatiere_AbonnementID")
                        .HasColumnType("int");

                    b.Property<int>("PerteMatiere_AtelierID");

                    b.Property<DateTime>("PerteMatiere_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PerteMatiere_MatierePremiereStockageID");

                    b.Property<decimal>("PerteMatiere_Quantite")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PerteMatiere_UniteMesureID");

                    b.Property<string>("PerteMatiere_Utilisateur")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PerteMatiere_ID");

                    b.HasIndex("PerteMatiere_AtelierID");

                    b.HasIndex("PerteMatiere_MatierePremiereStockageID");

                    b.HasIndex("PerteMatiere_UniteMesureID");

                    b.ToTable("Perte_Matiere");
                });

            modelBuilder.Entity("Domain.Entities.Perte_MatiereStock", b =>
                {
                    b.Property<int>("PerteMatiereStock_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PerteMatiere_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PerteMatiere_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PerteMatiere_MatierePremiereStockageID");

                    b.Property<decimal>("PerteMatiere_Quantite")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PerteMatiere_StockID");

                    b.Property<int>("PerteMatiere_UniteMesureID");

                    b.Property<string>("PerteMatiere_Utilisateur");

                    b.HasKey("PerteMatiereStock_ID");

                    b.HasIndex("PerteMatiere_MatierePremiereStockageID");

                    b.HasIndex("PerteMatiere_StockID");

                    b.HasIndex("PerteMatiere_UniteMesureID");

                    b.HasIndex("PerteMatiere_Utilisateur");

                    b.ToTable("Perte_MatiereStock");
                });

            modelBuilder.Entity("Domain.Entities.Perte_Pret", b =>
                {
                    b.Property<int>("PertePret_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PertePret_AbonnmentID")
                        .HasColumnType("int");

                    b.Property<int>("PertePret_AtelierID");

                    b.Property<DateTime>("PertePret_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PertePret_ProduitPretAtelierID");

                    b.Property<decimal>("PertePret_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PertePret_UniteMesureID");

                    b.HasKey("PertePret_ID");

                    b.HasIndex("PertePret_AtelierID");

                    b.HasIndex("PertePret_ProduitPretAtelierID");

                    b.HasIndex("PertePret_UniteMesureID");

                    b.ToTable("Perte_Pret");
                });

            modelBuilder.Entity("Domain.Entities.PerteDetails", b =>
                {
                    b.Property<int>("PerteDetails_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("PerteDetails_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PerteDetails_DatePerte")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PerteDetails_FormeID");

                    b.Property<int>("PerteDetails_PerteID");

                    b.Property<decimal>("PerteDetails_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PerteDetails_UniteVenteID");

                    b.HasKey("PerteDetails_ID");

                    b.HasIndex("PerteDetails_FormeID");

                    b.HasIndex("PerteDetails_PerteID");

                    b.HasIndex("PerteDetails_UniteVenteID");

                    b.ToTable("Perte_Details");
                });

            modelBuilder.Entity("Domain.Entities.Planification_ProdBase", b =>
                {
                    b.Property<int>("PlanificationProdBase_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlanificationProdBase_PlanificationID");

                    b.Property<string>("PlanificationProdBase_ProdBaseDesignation");

                    b.Property<int>("PlanificationProdBase_ProdBaseID");

                    b.Property<decimal>("PlanificationProdBase_Quantite");

                    b.Property<string>("PlanificationProdBase_UniteDesi");

                    b.HasKey("PlanificationProdBase_ID");

                    b.HasIndex("PlanificationProdBase_PlanificationID");

                    b.HasIndex("PlanificationProdBase_ProdBaseID");

                    b.ToTable("Planification_ProdBase");
                });

            modelBuilder.Entity("Domain.Entities.PlanificationdeProduction", b =>
                {
                    b.Property<int>("PlanificationProduction_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlanificationProduction_AbonnementId")
                        .HasColumnType("int");

                    b.Property<decimal>("PlanificationProduction_CoutRevient")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("PlanificationProduction_Date")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("PlanificationProduction_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("PlanificationProduction_DateModification")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PlanificationProduction_FormeProduitId");

                    b.Property<string>("PlanificationProduction_Motif")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlanificationProduction_PlanificationJourneeID");

                    b.Property<int>("PlanificationProduction_ProduitVendableId");

                    b.Property<decimal>("PlanificationProduction_QuantitePrevue")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("PlanificationProduction_QuantiteProduite")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("PlanificationProduction_QuantiteRestante")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PlanificationProduction_Id");

                    b.HasIndex("PlanificationProduction_FormeProduitId");

                    b.HasIndex("PlanificationProduction_PlanificationJourneeID");

                    b.HasIndex("PlanificationProduction_ProduitVendableId");

                    b.ToTable("Planification_Production");
                });

            modelBuilder.Entity("Domain.Entities.PlanificationdeProductionBase", b =>
                {
                    b.Property<int>("PlanificationProductionBase_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlanificationProductionBase_AbonnementId")
                        .HasColumnType("int");

                    b.Property<decimal>("PlanificationProductionBase_CoutRevient")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("PlanificationProductionBase_Date")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("PlanificationProductionBase_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("PlanificationProductionBase_DateModification")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PlanificationProductionBase_PlanificationJourneeID");

                    b.Property<int>("PlanificationProductionBase_ProduitBase");

                    b.Property<decimal>("PlanificationProductionBase_QuantitePrevue")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("PlanificationProductionBase_QuantiteProduite")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("PlanificationProductionBase_QuantiteRestante")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PlanificationProductionBase_Id");

                    b.HasIndex("PlanificationProductionBase_PlanificationJourneeID");

                    b.HasIndex("PlanificationProductionBase_ProduitBase");

                    b.ToTable("PlanificationdeProductionBase");
                });

            modelBuilder.Entity("Domain.Entities.PlanificationJournee", b =>
                {
                    b.Property<int>("PlanificationJournee_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlanificationJournee_AbonnementID")
                        .HasColumnType("int");

                    b.Property<int?>("PlanificationJournee_AtelierID");

                    b.Property<int>("PlanificationJournee_BonDeSortieID");

                    b.Property<decimal>("PlanificationJournee_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PlanificationJournee_Date")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("PlanificationJournee_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("PlanificationJournee_Etat")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("PlanificationJournee_LieuStockageID");

                    b.Property<bool?>("PlanificationJournee_SeenByAtelier")
                        .HasColumnType("bit");

                    b.Property<bool?>("PlanificationJournee_SeenByStock")
                        .HasColumnType("bit");

                    b.Property<string>("PlanificationJournee_UtilisateurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanificationJournee_ValidePar")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Planification_GeneratedID")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PlanificationJournee_ID");

                    b.HasIndex("PlanificationJournee_AtelierID");

                    b.HasIndex("PlanificationJournee_BonDeSortieID");

                    b.HasIndex("PlanificationJournee_LieuStockageID");

                    b.ToTable("Planification_Journee");
                });

            modelBuilder.Entity("Domain.Entities.PlanificationJourneeBase", b =>
                {
                    b.Property<int>("PlanificationJourneeBase_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlanificationJourneeBase_AbonnementID")
                        .HasColumnType("int");

                    b.Property<int?>("PlanificationJourneeBase_AtelierID");

                    b.Property<int>("PlanificationJourneeBase_BonDeSortieID");

                    b.Property<decimal>("PlanificationJourneeBase_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PlanificationJourneeBase_Date")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("PlanificationJourneeBase_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("PlanificationJourneeBase_Etat")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("PlanificationJourneeBase_LieuStockageID");

                    b.Property<bool?>("PlanificationJourneeBase_SeenByAtelier")
                        .HasColumnType("bit");

                    b.Property<bool?>("PlanificationJourneeBase_SeenByStock")
                        .HasColumnType("bit");

                    b.Property<string>("PlanificationJourneeBase_UtilisateurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanificationJourneeBase_ValidePar")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlanificationJourneeBase_ID");

                    b.HasIndex("PlanificationJourneeBase_AtelierID");

                    b.HasIndex("PlanificationJourneeBase_BonDeSortieID");

                    b.HasIndex("PlanificationJourneeBase_LieuStockageID");

                    b.ToTable("PlanificationJourneeBase");
                });

            modelBuilder.Entity("Domain.Entities.Point_Vente", b =>
                {
                    b.Property<int>("PointVente_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PointVente_AbonnementId")
                        .HasColumnType("int");

                    b.Property<string>("PointVente_Adresse")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("PointVente_AtelierID");

                    b.Property<int>("PointVente_CodePostal")
                        .HasColumnType("int");

                    b.Property<DateTime>("PointVente_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("PointVente_DateSaisie")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PointVente_IsActive");

                    b.Property<string>("PointVente_Nom")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PointVente_NomResponsable")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("PointVente_StockID");

                    b.Property<string>("PointVente_Telephone")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PointVente_TypeService")
                        .HasColumnType("int");

                    b.Property<string>("PointVente_UtilisateurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PointVente_VilleID");

                    b.HasKey("PointVente_Id");

                    b.HasIndex("PointVente_AtelierID");

                    b.HasIndex("PointVente_StockID");

                    b.HasIndex("PointVente_VilleID");

                    b.ToTable("Point_Vente");
                });

            modelBuilder.Entity("Domain.Entities.PointPorduction_Famille", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abonnement_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FamilleProduit_ID");

                    b.Property<int>("Is_Active")
                        .HasColumnType("int");

                    b.Property<int>("PointProduction_ID");

                    b.HasKey("Id");

                    b.HasIndex("FamilleProduit_ID");

                    b.HasIndex("PointProduction_ID");

                    b.ToTable("PointProduction_Famille");
                });

            modelBuilder.Entity("Domain.Entities.PointVente_Famille", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abonnement_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FamilleProduit_Id");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("PointVente_Id");

                    b.HasKey("Id");

                    b.HasIndex("FamilleProduit_Id");

                    b.HasIndex("PointVente_Id");

                    b.ToTable("PointVente_Famille");
                });

            modelBuilder.Entity("Domain.Entities.PointVente_Stock", b =>
                {
                    b.Property<int>("PointVenteStock_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PointVenteStock_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PointVenteStock_DateModification")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PointVenteStock_FormeProduitID");

                    b.Property<int>("PointVenteStock_PointVenteID");

                    b.Property<int>("PointVenteStock_ProduitID");

                    b.Property<decimal>("PointVenteStock_QuantiteProduit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PointVenteStock_Id");

                    b.HasIndex("PointVenteStock_FormeProduitID");

                    b.HasIndex("PointVenteStock_PointVenteID");

                    b.HasIndex("PointVenteStock_ProduitID");

                    b.ToTable("PointVente_Stock");
                });

            modelBuilder.Entity("Domain.Entities.PointVente_User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abonnement_ID");

                    b.Property<int>("IsActive");

                    b.Property<int>("PointVente_Id");

                    b.Property<string>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("PointVente_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("PointVente_User");
                });

            modelBuilder.Entity("Domain.Entities.PositionVente", b =>
                {
                    b.Property<int>("PositionVente_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PositionVente_AbonnementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PositionVente_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PositionVente_IsActive")
                        .HasColumnType("int");

                    b.Property<string>("PositionVente_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PositionVente_ModePaiementId");

                    b.Property<int>("PositionVente_PointVenteId");

                    b.Property<string>("PositionVente_UtilisateurId")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("PositionVente_Id");

                    b.HasIndex("PositionVente_ModePaiementId");

                    b.HasIndex("PositionVente_PointVenteId");

                    b.ToTable("Position_Vente");
                });

            modelBuilder.Entity("Domain.Entities.PrixProduit", b =>
                {
                    b.Property<int>("PrixProduit_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PrixProduit_Description")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("PrixProduit_FormeProduitId");

                    b.Property<int>("PrixProduit_IsActive")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixProduit_Prix")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("PrixProduit_QuantiteMinimale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PrixProduit_TauxTVAId")
                        .HasColumnType("int");

                    b.HasKey("PrixProduit_Id");

                    b.HasIndex("PrixProduit_FormeProduitId");

                    b.ToTable("Prix_Produit");
                });

            modelBuilder.Entity("Domain.Entities.ProdBase_Atelier", b =>
                {
                    b.Property<int>("ProdBase_Atelier_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProdBase_Atelier_AbonnementID")
                        .HasColumnType("int");

                    b.Property<int>("ProdBase_Atelier_AtelierID");

                    b.Property<DateTime>("ProdBase_Atelier_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("ProdBase_Atelier_DateModification")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ProdBase_Atelier_ProduitID");

                    b.Property<decimal>("ProdBase_Atelier_QuantiteProduite")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("ProdBase_Atelier_Id");

                    b.HasIndex("ProdBase_Atelier_AtelierID");

                    b.HasIndex("ProdBase_Atelier_ProduitID");

                    b.ToTable("ProdBase_Atelier");
                });

            modelBuilder.Entity("Domain.Entities.Produit_Composants", b =>
                {
                    b.Property<int>("ProduitComposant_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProduitComposant_AbonnementID");

                    b.Property<string>("ProduitComposant_ComposantName");

                    b.Property<string>("ProduitComposant_ComposantNameAR");

                    b.Property<int>("ProduitComposant_ProduitID");

                    b.Property<string>("ProduitComposant_Valeur");

                    b.Property<int>("ProduitComposant_isActive");

                    b.HasKey("ProduitComposant_ID");

                    b.HasIndex("ProduitComposant_ProduitID");

                    b.ToTable("Produit_Composants");
                });

            modelBuilder.Entity("Domain.Entities.ProduitAppro", b =>
                {
                    b.Property<int>("ProduitAppro_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProduitAppro_AbonnementID")
                        .HasColumnType("int");

                    b.Property<int>("ProduitAppro_AtelierID");

                    b.Property<DateTime>("ProduitAppro_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("ProduitAppro_DateModification")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ProduitAppro_FormeProduitID");

                    b.Property<int>("ProduitAppro_ProduitID");

                    b.Property<decimal>("ProduitAppro_QuantiteProduite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProduitAppro_Id");

                    b.HasIndex("ProduitAppro_AtelierID");

                    b.HasIndex("ProduitAppro_FormeProduitID");

                    b.HasIndex("ProduitAppro_ProduitID");

                    b.ToTable("ProduitAppro");
                });

            modelBuilder.Entity("Domain.Entities.ProduitBase", b =>
                {
                    b.Property<int>("ProduitBase_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProduitBase_AbonnementID")
                        .HasColumnType("int");

                    b.Property<decimal>("ProduitBase_CoutDeRevient")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("ProduitBase_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ProduitBase_Designation")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProduitBase_FormeStockageID");

                    b.Property<int>("ProduitBase_IsActive")
                        .HasColumnType("int");

                    b.Property<int>("ProduitBase_UniteMesureID");

                    b.HasKey("ProduitBase_ID");

                    b.HasIndex("ProduitBase_FormeStockageID");

                    b.HasIndex("ProduitBase_UniteMesureID");

                    b.ToTable("ProduitBase");
                });

            modelBuilder.Entity("Domain.Entities.ProduitBaseFicheTechnique", b =>
                {
                    b.Property<int>("ProduitBaseFicheTechnique_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProduitBaseFicheTechnique_AbonnementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProduitBaseFicheTechnique_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ProduitBaseFicheTechnique_FicheTehcniqueProduitBaseID");

                    b.Property<int>("ProduitBaseFicheTechnique_MatierePremiereID");

                    b.Property<decimal>("ProduitBaseFicheTechnique_Prix")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ProduitBaseFicheTechnique_QuantiteMatiere")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ProduitBaseFicheTechnique_UniteMesureID");

                    b.HasKey("ProduitBaseFicheTechnique_ID");

                    b.HasIndex("ProduitBaseFicheTechnique_FicheTehcniqueProduitBaseID");

                    b.HasIndex("ProduitBaseFicheTechnique_MatierePremiereID");

                    b.HasIndex("ProduitBaseFicheTechnique_UniteMesureID");

                    b.ToTable("ProduitBaseFicheTechnique");
                });

            modelBuilder.Entity("Domain.Entities.ProduitConsomableStokage", b =>
                {
                    b.Property<int>("ProduitConsomableStokage_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProduitConsomableStokage_AbonnementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProduitConsomableStokage_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ProduitConsomableStokage_FormeProduitId");

                    b.Property<int>("ProduitConsomableStokage_IsActive");

                    b.Property<int>("ProduitConsomableStokage_LieuStockID");

                    b.Property<int>("ProduitConsomableStokage_ProduitVendableId");

                    b.Property<decimal>("ProduitConsomableStokage_QuantiteActuelle");

                    b.Property<decimal>("ProduitConsomableStokage_StockMaximum")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("ProduitConsomableStokage_StockMinimum")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ProduitConsomableStokage_Id");

                    b.HasIndex("ProduitConsomableStokage_FormeProduitId");

                    b.HasIndex("ProduitConsomableStokage_LieuStockID");

                    b.HasIndex("ProduitConsomableStokage_ProduitVendableId");

                    b.ToTable("ProduitConsomable_Stokage");
                });

            modelBuilder.Entity("Domain.Entities.ProduitFicheTechnique", b =>
                {
                    b.Property<int>("FicheTechnique_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FicheTechnique_AbonnementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FicheTechnique_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FicheTechnique_FicheTechniqueBridgeID");

                    b.Property<int>("FicheTechnique_IsActive");

                    b.Property<string>("FicheTechnique_Libelle")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FicheTechnique_MatierePremiereId");

                    b.Property<decimal>("FicheTechnique_Prix")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("FicheTechnique_ProduitVendableId");

                    b.Property<decimal>("FicheTechnique_QuantiteMatiere")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("FicheTechnique_UniteMesureId");

                    b.HasKey("FicheTechnique_Id");

                    b.HasIndex("FicheTechnique_FicheTechniqueBridgeID");

                    b.HasIndex("FicheTechnique_MatierePremiereId");

                    b.HasIndex("FicheTechnique_ProduitVendableId");

                    b.HasIndex("FicheTechnique_UniteMesureId");

                    b.ToTable("Produit_FicheTechnique");
                });

            modelBuilder.Entity("Domain.Entities.ProduitPack_Atelier", b =>
                {
                    b.Property<int>("ProduitPackAtelier_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProduitPackAtelier_AbonnementID")
                        .HasColumnType("int");

                    b.Property<int>("ProduitPackAtelier_AtelierID");

                    b.Property<DateTime>("ProduitPackAtelier_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ProduitPackAtelier_FormeID");

                    b.Property<int>("ProduitPackAtelier_ProduitPackID");

                    b.Property<decimal>("ProduitPackAtelier_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProduitPackAtelier_ID");

                    b.HasIndex("ProduitPackAtelier_AtelierID");

                    b.HasIndex("ProduitPackAtelier_FormeID");

                    b.HasIndex("ProduitPackAtelier_ProduitPackID");

                    b.ToTable("ProduitPack_Atelier");
                });

            modelBuilder.Entity("Domain.Entities.ProduitPackage", b =>
                {
                    b.Property<int>("ProduitPackage_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProduitPackage_AbonnementID")
                        .HasColumnType("int");

                    b.Property<decimal>("ProduitPackage_CoutdeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ProduitPackage_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ProduitPackage_Designation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProduitPackage_FamilleID");

                    b.Property<string>("ProduitPackage_Photo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("ProduitPackage_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProduitPackage_UniteVente");

                    b.HasKey("ProduitPackage_ID");

                    b.HasIndex("ProduitPackage_FamilleID");

                    b.HasIndex("ProduitPackage_UniteVente");

                    b.ToTable("ProduitPackage");
                });

            modelBuilder.Entity("Domain.Entities.ProduitPret_Atelier", b =>
                {
                    b.Property<int>("ProduitPretAtelier_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProduitPretAtelier_AtelierID");

                    b.Property<DateTime>("ProduitPretAtelier_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ProduitPretAtelier_FormeID");

                    b.Property<decimal>("ProduitPretAtelier_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProduitPretAtelier__ProduitID");

                    b.HasKey("ProduitPretAtelier_ID");

                    b.HasIndex("ProduitPretAtelier_AtelierID");

                    b.HasIndex("ProduitPretAtelier_FormeID");

                    b.HasIndex("ProduitPretAtelier__ProduitID");

                    b.ToTable("ProduitPret_Atelier");
                });

            modelBuilder.Entity("Domain.Entities.ProduitPretConsomer", b =>
                {
                    b.Property<int>("ProduitPretConsomer_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProduitPretConsomer_AbonnementID");

                    b.Property<DateTime>("ProduitPretConsomer_DateCreation");

                    b.Property<int>("ProduitPretConsomer_DelaiConsomation");

                    b.Property<string>("ProduitPretConsomer_Description");

                    b.Property<string>("ProduitPretConsomer_Designation");

                    b.Property<bool>("ProduitPretConsomer_EnStock");

                    b.Property<int>("ProduitPretConsomer_FamilleProduit");

                    b.Property<int>("ProduitPretConsomer_FormeStockageId");

                    b.Property<int>("ProduitPretConsomer_IsActive");

                    b.Property<string>("ProduitPretConsomer_Photo");

                    b.Property<decimal>("ProduitPretConsomer_PrixMoyenAchat");

                    b.Property<decimal>("ProduitPretConsomer_StockMaximum");

                    b.Property<decimal>("ProduitPretConsomer_StockMinimun");

                    b.Property<int>("ProduitPretConsomer_UniteMesureAchatId");

                    b.HasKey("ProduitPretConsomer_ID");

                    b.HasIndex("ProduitPretConsomer_FamilleProduit");

                    b.HasIndex("ProduitPretConsomer_FormeStockageId");

                    b.HasIndex("ProduitPretConsomer_UniteMesureAchatId");

                    b.ToTable("Produit_PretConsomer");
                });

            modelBuilder.Entity("Domain.Entities.ProduitVendable", b =>
                {
                    b.Property<int>("ProduitVendable_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProduitVendable_AbonnementId")
                        .HasColumnType("int");

                    b.Property<int>("ProduitVendable_AvecFT")
                        .HasColumnType("int");

                    b.Property<string>("ProduitVendable_CodeBarre")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProduitVendable_CodeProduit")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProduitVendable_Conditionnement")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("ProduitVendable_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ProduitVendable_DelaiConsommation")
                        .HasColumnType("int");

                    b.Property<string>("ProduitVendable_Description")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProduitVendable_Designation")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProduitVendable_DesignationAR")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProduitVendable_DesignationEN")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProduitVendable_FamilleProduitId");

                    b.Property<int?>("ProduitVendable_FormStockageId");

                    b.Property<string>("ProduitVendable_GrandePhoto")
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ProduitVendable_IsActive");

                    b.Property<string>("ProduitVendable_PetitePhoto")
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ProduitVendable_PlanificationFlag")
                        .HasColumnType("int");

                    b.Property<string>("ProduitVendable_Specification")
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("ProduitVendable_StockMaximum")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ProduitVendable_StockMinimum")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProduitVendable_TempConservation")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ProduitVendable_TvaId");

                    b.Property<int?>("ProduitVendable_UniteMesureId");

                    b.Property<int?>("ProduitVendable_UniteMesureId_FT")
                        .HasColumnType("int");

                    b.Property<decimal?>("Produit_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProduitVendable_Id");

                    b.HasIndex("ProduitVendable_FamilleProduitId");

                    b.HasIndex("ProduitVendable_FormStockageId");

                    b.HasIndex("ProduitVendable_TvaId");

                    b.HasIndex("ProduitVendable_UniteMesureId");

                    b.ToTable("Produit_Vendable");
                });

            modelBuilder.Entity("Domain.Entities.Reception_Stock", b =>
                {
                    b.Property<int>("ReceptionStock_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReceptionStock_AbonnementID")
                        .HasColumnType("int");

                    b.Property<int>("ReceptionStock_AtelierID");

                    b.Property<DateTime>("ReceptionStock_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("ReceptionStock_DateReception")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ReceptionStock_MatiereID");

                    b.Property<decimal>("ReceptionStock_Quantite")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ReceptionStock_StockID");

                    b.Property<int>("ReceptionStock_UniteID");

                    b.HasKey("ReceptionStock_ID");

                    b.HasIndex("ReceptionStock_AtelierID");

                    b.HasIndex("ReceptionStock_MatiereID");

                    b.HasIndex("ReceptionStock_StockID");

                    b.HasIndex("ReceptionStock_UniteID");

                    b.ToTable("Reception_Stock");
                });

            modelBuilder.Entity("Domain.Entities.Retour_Details", b =>
                {
                    b.Property<int>("RetourDetails_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RetourDetails_DateRetour")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RetourDetails_FormeID");

                    b.Property<decimal>("RetourDetails_PrixProduit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RetourDetails_PrixTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RetourDetails_Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RetourDetails_RetourID");

                    b.Property<int>("RetourDetails_UniteVente");

                    b.Property<int>("RetourDetails_isPerte");

                    b.HasKey("RetourDetails_ID");

                    b.HasIndex("RetourDetails_FormeID");

                    b.HasIndex("RetourDetails_RetourID");

                    b.HasIndex("RetourDetails_UniteVente");

                    b.ToTable("Retour_Details");
                });

            modelBuilder.Entity("Domain.Entities.RetourProduits", b =>
                {
                    b.Property<int>("Retour_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Retour_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Retour_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Retour_FlagCloture")
                        .HasColumnType("int");

                    b.Property<int>("Retour_PositionVenteID");

                    b.Property<decimal>("Retour_PrixTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Retour_UtilisateurID")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Retour_Id");

                    b.HasIndex("Retour_PositionVenteID");

                    b.ToTable("Retour_Produits");
                });

            modelBuilder.Entity("Domain.Entities.RetourStock", b =>
                {
                    b.Property<int>("RetourStok_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RetourStok_AbonnementID")
                        .HasColumnType("int");

                    b.Property<int>("RetourStok_BonDeSortieID");

                    b.Property<DateTime>("RetourStok_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RetourStok_Etat")
                        .HasColumnType("int");

                    b.Property<string>("RetourStok_Motif")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RetourStok_PlanificationID");

                    b.Property<string>("RetourStok_UtilisateurID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RetourStok_ValideParID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RetourStok_ID");

                    b.HasIndex("RetourStok_BonDeSortieID");

                    b.HasIndex("RetourStok_PlanificationID");

                    b.ToTable("Retour_Stock");
                });

            modelBuilder.Entity("Domain.Entities.RetraitCaisse", b =>
                {
                    b.Property<int>("RetraitCaisse_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RetraitCaisse_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RetraitCaisse_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RetraitCaisse_FlagCloture")
                        .HasColumnType("int");

                    b.Property<decimal>("RetraitCaisse_Montant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RetraitCaisse_Motif")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RetraitCaisse_PositionVenteID");

                    b.Property<int>("RetraitCaisse_TypeRetraitID");

                    b.Property<string>("RetraitCaisse_UtilisateurID");

                    b.HasKey("RetraitCaisse_ID");

                    b.HasIndex("RetraitCaisse_PositionVenteID");

                    b.HasIndex("RetraitCaisse_TypeRetraitID");

                    b.HasIndex("RetraitCaisse_UtilisateurID");

                    b.ToTable("Retrait_Caisse");
                });

            modelBuilder.Entity("Domain.Entities.RetraitType", b =>
                {
                    b.Property<int>("RetraitType_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RetraitType_Libelle")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("RetraitType_ID");

                    b.ToTable("Retrait_Type");
                });

            modelBuilder.Entity("Domain.Entities.Salle", b =>
                {
                    b.Property<int>("Salle_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Salle_AbonnementId");

                    b.Property<DateTime>("Salle_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Salle_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Salle_PositionVenteId");

                    b.Property<string>("Salle_UtilisateurId")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Salle_Id");

                    b.HasIndex("Salle_PositionVenteId");

                    b.ToTable("Salle");
                });

            modelBuilder.Entity("Domain.Entities.Section_Stockage", b =>
                {
                    b.Property<int>("Section_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Section_Designation")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Section_IsActive");

                    b.Property<int>("Section_ZoneStockageId");

                    b.HasKey("Section_Id");

                    b.HasIndex("Section_ZoneStockageId");

                    b.ToTable("Section_Stockage");
                });

            modelBuilder.Entity("Domain.Entities.Sous_ProduitPackage", b =>
                {
                    b.Property<int>("SousProduitPackage_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SousProduitPackage_AbonnementID")
                        .HasColumnType("int");

                    b.Property<decimal>("SousProduitPackage_CoutDeRevient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SousProduitPackage_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("SousProduitPackage_FormeProduittID");

                    b.Property<int>("SousProduitPackage_ProduitPackageID");

                    b.Property<decimal>("SousProduitPackage_QuantiteProduit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SousProduitPackage_ID");

                    b.HasIndex("SousProduitPackage_FormeProduittID");

                    b.HasIndex("SousProduitPackage_ProduitPackageID");

                    b.ToTable("Sous_ProduitPackage");
                });

            modelBuilder.Entity("Domain.Entities.SousFamille", b =>
                {
                    b.Property<int>("SousFamille_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SousFamille_AbonnementID")
                        .HasColumnType("int");

                    b.Property<string>("SousFamille_Image")
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("SousFamille_Libelle")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SousFamille_ParentID");

                    b.HasKey("SousFamille_ID");

                    b.HasIndex("SousFamille_ParentID");

                    b.ToTable("Sous_Famille");
                });

            modelBuilder.Entity("Domain.Entities.SousMatierePackage", b =>
                {
                    b.Property<int>("SousMatierePackage_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SousMatierePackage_AbonnementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SousMatierePackage_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("SousMatierePackage_MatiereID");

                    b.Property<int>("SousMatierePackage_ProduitPackageID");

                    b.HasKey("SousMatierePackage_ID");

                    b.HasIndex("SousMatierePackage_MatiereID");

                    b.HasIndex("SousMatierePackage_ProduitPackageID");

                    b.ToTable("SousMatierePackage");
                });

            modelBuilder.Entity("Domain.Entities.Statut_BL", b =>
                {
                    b.Property<int>("StatutBL_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatutBL_Name");

                    b.HasKey("StatutBL_ID");

                    b.ToTable("Statut_BL");
                });

            modelBuilder.Entity("Domain.Entities.Statut_Livraison", b =>
                {
                    b.Property<int>("StatutCommande_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StatutCommande_AbonnementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatutCommande_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("StatutCommande_Libelle")
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatutCommande_Id");

                    b.ToTable("Statut_Livraison");
                });

            modelBuilder.Entity("Domain.Entities.Statut_PaiementCommande", b =>
                {
                    b.Property<int>("StatutPaiementCommande_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatutPaiementCommande_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatutPaiementCommande_ID");

                    b.ToTable("Statut_PaiementCommande");
                });

            modelBuilder.Entity("Domain.Entities.Stock_Achat", b =>
                {
                    b.Property<int>("StockAchat_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StockAchat_AbonnementID");

                    b.Property<DateTime?>("StockAchat_DateLimiteConso");

                    b.Property<DateTime?>("StockAchat_DateReception");

                    b.Property<string>("StockAchat_LotFournisseur");

                    b.Property<string>("StockAchat_LotIntern");

                    b.Property<int>("StockAchat_MatiereID");

                    b.Property<decimal>("StockAchat_QuantiteMatiere");

                    b.Property<decimal>("StockAchat_QuantiteRestante");

                    b.Property<string>("StockAchat_Temperature");

                    b.Property<int>("StockAchat_UniteMesureID");

                    b.HasKey("StockAchat_ID");

                    b.HasIndex("StockAchat_MatiereID");

                    b.HasIndex("StockAchat_UniteMesureID");

                    b.ToTable("Stock_Achat");
                });

            modelBuilder.Entity("Domain.Entities.Stock_User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abonnement_ID");

                    b.Property<int>("IsActive");

                    b.Property<int>("Stock_Id");

                    b.Property<string>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("Stock_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Stock_User");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.Property<int>("Table_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Table_AbonnementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Table_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Table_IsActive")
                        .HasColumnType("int");

                    b.Property<int>("Table_Numero")
                        .HasColumnType("int");

                    b.Property<int>("Table_SalleId");

                    b.Property<string>("Table_UtilisateurId")
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Table_Id");

                    b.HasIndex("Table_SalleId");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("Domain.Entities.Taux_TVA", b =>
                {
                    b.Property<int>("TauxTVA_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TauxTVA_AbonnementId");

                    b.Property<DateTime>("TauxTVA_DateCreation");

                    b.Property<decimal>("TauxTVA_Pourcentage")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("TauxTVA_Id");

                    b.ToTable("Taux_TVA");
                });

            modelBuilder.Entity("Domain.Entities.Transfert_Matiere", b =>
                {
                    b.Property<int>("TransfertMat_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TransfertMat_AbonnementID");

                    b.Property<string>("TransfertMat_CreePar");

                    b.Property<DateTime>("TransfertMat_DateCreation");

                    b.Property<DateTime?>("TransfertMat_DateValidation");

                    b.Property<string>("TransfertMat_Numero");

                    b.Property<string>("TransfertMat_Statut");

                    b.Property<string>("TransfertMat_ValidePar");

                    b.HasKey("TransfertMat_ID");

                    b.ToTable("Transfert_Matiere");
                });

            modelBuilder.Entity("Domain.Entities.Tva", b =>
                {
                    b.Property<int>("tva_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("commande_ID");

                    b.Property<decimal>("tauxTva")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("totalHt")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("totalTtc")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("totalTva")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("vente_ID");

                    b.HasKey("tva_ID");

                    b.HasIndex("commande_ID");

                    b.HasIndex("vente_ID");

                    b.ToTable("Tva");
                });

            modelBuilder.Entity("Domain.Entities.Type_Contenu", b =>
                {
                    b.Property<int>("TypeContenu_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeContenu_Libelle")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TypeContenu_Id");

                    b.ToTable("Type_Contenu");
                });

            modelBuilder.Entity("Domain.Entities.Unite_Categorie", b =>
                {
                    b.Property<int>("UniteCategorie_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UniteCategorie_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UniteCategorie_Id");

                    b.ToTable("Unite_Categorie");
                });

            modelBuilder.Entity("Domain.Entities.Unite_Mesure", b =>
                {
                    b.Property<int>("UniteMesure_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UniteMesure_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Unite_CategorieID");

                    b.HasKey("UniteMesure_Id");

                    b.ToTable("Unite_Mesure");
                });

            modelBuilder.Entity("Domain.Entities.Unite_MesureMatiere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abonnement_ID");

                    b.Property<int>("IsActive");

                    b.Property<int>("MatierePremiere_Id");

                    b.Property<int>("Unite_Id");

                    b.HasKey("Id");

                    b.HasIndex("MatierePremiere_Id");

                    b.HasIndex("Unite_Id");

                    b.ToTable("Unite_MesureMatiere");
                });

            modelBuilder.Entity("Domain.Entities.UniteMesure_ProdBase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abonnement_ID");

                    b.Property<int>("ProduitBase_ID");

                    b.Property<int>("UniteMesure_ID");

                    b.Property<int>("isActive");

                    b.HasKey("ID");

                    b.HasIndex("ProduitBase_ID");

                    b.HasIndex("UniteMesure_ID");

                    b.ToTable("UniteMesure_ProdBase");
                });

            modelBuilder.Entity("Domain.Entities.Vente", b =>
                {
                    b.Property<int>("Vente_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Vente_AbonnementId");

                    b.Property<int?>("Vente_CommandeId");

                    b.Property<string>("Vente_Commentaire");

                    b.Property<DateTime>("Vente_Date");

                    b.Property<DateTime>("Vente_DateCreation");

                    b.Property<decimal>("Vente_Marge");

                    b.Property<int>("Vente_ModePaiement");

                    b.Property<string>("Vente_NumeroTicket")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Vente_PointVenteId");

                    b.Property<int>("Vente_PositionVenteId");

                    b.Property<decimal>("Vente_Prix");

                    b.Property<int?>("Vente_PrixId");

                    b.Property<decimal>("Vente_PrixTotalRemise");

                    b.Property<int?>("Vente_ProduitVendableId");

                    b.Property<decimal>("Vente_Quantite");

                    b.Property<decimal>("Vente_TauxDeRemise")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Vente_UtilisateurId");

                    b.HasKey("Vente_Id");

                    b.HasIndex("Vente_ModePaiement");

                    b.HasIndex("Vente_PointVenteId");

                    b.HasIndex("Vente_PositionVenteId");

                    b.ToTable("Vente");
                });

            modelBuilder.Entity("Domain.Entities.VenteDetails", b =>
                {
                    b.Property<int>("VenteDetails_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("VenteDetails_AbonnementID")
                        .HasColumnType("int");

                    b.Property<decimal>("VenteDetails_CoutDeRevient")
                        .HasColumnType("decimal(12,8)");

                    b.Property<DateTime>("VenteDetails_DateCreation")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("VenteDetails_FlagCloture")
                        .HasColumnType("int");

                    b.Property<int>("VenteDetails_FormeProduitId");

                    b.Property<decimal>("VenteDetails_Marge")
                        .HasColumnType("decimal(12,8)");

                    b.Property<decimal>("VenteDetails_Prix")
                        .HasColumnType("decimal(12,8)");

                    b.Property<decimal>("VenteDetails_Quantite")
                        .HasColumnType("decimal(12,8)");

                    b.Property<int>("VenteDetails_UniteId");

                    b.Property<int>("VenteDetails_VentId");

                    b.HasKey("VenteDetails_Id");

                    b.HasIndex("VenteDetails_FormeProduitId");

                    b.HasIndex("VenteDetails_UniteId");

                    b.HasIndex("VenteDetails_VentId");

                    b.ToTable("VenteDetails");
                });

            modelBuilder.Entity("Domain.Entities.Ville", b =>
                {
                    b.Property<int>("Ville_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ville_Libelle")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Ville_ID");

                    b.ToTable("Ville");
                });

            modelBuilder.Entity("Domain.Entities.Zone_Stockage", b =>
                {
                    b.Property<int>("ZoneStockage_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ZoneStockage_AbonnementId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ZoneStockage_CapaciteStockage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ZoneStockage_DateCreation")
                        .HasColumnType("smalldatatime");

                    b.Property<string>("ZoneStockage_Designation")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ZoneStockage_FormeStockageId");

                    b.Property<int?>("ZoneStockage_IsActive");

                    b.Property<int?>("ZoneStockage_LieuStockageId");

                    b.Property<int?>("ZoneStockage_TypeContenuId");

                    b.Property<int?>("ZoneStockage_UniteMesureId");

                    b.HasKey("ZoneStockage_Id");

                    b.HasIndex("ZoneStockage_FormeStockageId");

                    b.HasIndex("ZoneStockage_LieuStockageId");

                    b.HasIndex("ZoneStockage_TypeContenuId");

                    b.HasIndex("ZoneStockage_UniteMesureId");

                    b.ToTable("Zone_Stockage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Authentication.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Entities.Abonnement_Client", "abonnement_Client")
                        .WithMany()
                        .HasForeignKey("Abonnement_ID");

                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("AtelierID");

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("LieuStockage_ID");

                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany()
                        .HasForeignKey("PointVente_ID");

                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany()
                        .HasForeignKey("PositionVente_ID");
                });

            modelBuilder.Entity("Domain.Entities.Affectation_Agent_Table", b =>
                {
                    b.HasOne("Domain.Entities.AgentServeur", "Agent_Serveur")
                        .WithMany("Tables_Link")
                        .HasForeignKey("Affectation_AgentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Table", "Table")
                        .WithMany("Agents_Link")
                        .HasForeignKey("Affectation_TableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.AllimentationCaisse", b =>
                {
                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany()
                        .HasForeignKey("AllimentationCaisse_PositionVenteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Authentication.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("AllimentationCaisse_UtilsateurID");
                });

            modelBuilder.Entity("Domain.Entities.Approvisionnement", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("Approvisionnement_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("Approvisionnement_FormeProduitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany()
                        .HasForeignKey("Approvisionnement_PointVenteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitAppro", "ProduitAppro")
                        .WithMany()
                        .HasForeignKey("Approvisionnement_ProduitApproID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitVendable", "Produit_Vendable")
                        .WithMany()
                        .HasForeignKey("Approvisionnement_ProduitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Approvisionnement_Matiere", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementMatiere_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MatierePremiereStockage", "MatierePremiereStockage")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementMatiere_MatiereStockID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementMatiere_StockID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementMatiere_UniteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Approvisionnement_ProduitConso", b =>
                {
                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementProduit_PointVenteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitConsomableStokage", "ProduitConsomable_Stokage")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementProduit_ProduitStockageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementProduit_StockID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementProduit_UniteMesureId");
                });

            modelBuilder.Entity("Domain.Entities.Approvisionnement_ProduitPackage", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementProduitPackage_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementProduitPackage_PointVenteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPack_Atelier", "ProduitPack_Atelier")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementProduitPackage_ProduitpackAtelierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ApprovisionnementProduitPackage__UniteMesureId");
                });

            modelBuilder.Entity("Domain.Entities.Article_BC", b =>
                {
                    b.HasOne("Domain.Entities.BonDeCommande", "bonDeCommande")
                        .WithMany("listeArticles")
                        .HasForeignKey("ArticleBC_BCID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MatierePremiere", "MatierePremiere")
                        .WithMany()
                        .HasForeignKey("ArticleBC_MatiereID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ArticleBC_UniteMesure")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Article_BL", b =>
                {
                    b.HasOne("Domain.Entities.BonDeLivraison", "bonDeLivraison")
                        .WithMany("listeArticles")
                        .HasForeignKey("ArticleBL_BonLivraisonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MatierePremiere", "MatierePremiere")
                        .WithMany()
                        .HasForeignKey("ArticleBL_MatiereID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ArticleBL_UniteMesureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Atelier", b =>
                {
                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("Atelier_StockID");

                    b.HasOne("Domain.Entities.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("Atelier_VilleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Atelier_User", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("Atelier_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Authentication.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("User_Id");
                });

            modelBuilder.Entity("Domain.Entities.BonDeCommande", b =>
                {
                    b.HasOne("Domain.Entities.Abonnement_Client", "Abonnement_Client")
                        .WithMany()
                        .HasForeignKey("BonDeCommande_AbonnementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Fournisseur", "Fournisseur")
                        .WithMany()
                        .HasForeignKey("BonDeCommande_FournisseurID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.BonDeLivraison", b =>
                {
                    b.HasOne("Domain.Entities.Abonnement_Client", "Abonnement_Client")
                        .WithMany()
                        .HasForeignKey("BonDeLivraison_AbonnementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.BonDeCommande", "Bon_De_Commande")
                        .WithMany()
                        .HasForeignKey("BonDeLivraison_BCID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Facture", "Facture")
                        .WithMany()
                        .HasForeignKey("BonDeLivraison_FactureID");

                    b.HasOne("Domain.Entities.Statut_BL", "Statut_BL")
                        .WithMany()
                        .HasForeignKey("BonDeLivraison_StatutID");
                });

            modelBuilder.Entity("Domain.Entities.BonDeSortie", b =>
                {
                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("BonDeSortie_StockID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.BonDetails", b =>
                {
                    b.HasOne("Domain.Entities.BonDeSortie", "BonDe_Sortie")
                        .WithMany("Bon_Details")
                        .HasForeignKey("BonDeSortie_BonDeSortieID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MatierePremiere", "Matiere_Premiere")
                        .WithMany()
                        .HasForeignKey("BonDeSortie_MatiereId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("BonDeSortie_UniteMesureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ClotureJournee", b =>
                {
                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany()
                        .HasForeignKey("ClotueJournee_PositionVenteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Authentication.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ClotueJournee_UtilisateurID");
                });

            modelBuilder.Entity("Domain.Entities.Commande", b =>
                {
                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany()
                        .HasForeignKey("Commande_CaissePayementId");

                    b.HasOne("Domain.Entities.Statut_Livraison", "Statut_Livraison")
                        .WithMany()
                        .HasForeignKey("Commande_EtatDeLivraison")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Statut_PaiementCommande", "Statut_PaiementCommande")
                        .WithMany()
                        .HasForeignKey("Commande_EtatDePaiement")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Authentication.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("Commande_UtilisateurCommandeId");
                });

            modelBuilder.Entity("Domain.Entities.Commande_Paiement", b =>
                {
                    b.HasOne("Domain.Entities.Commande", "Commande")
                        .WithMany()
                        .HasForeignKey("CommandePaiement_CommandeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ModePaiement", "Mode_Paiement")
                        .WithMany()
                        .HasForeignKey("CommandePaiement_ModePaiementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany()
                        .HasForeignKey("CommandePaiement_PositionVenteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.CommandeDetail", b =>
                {
                    b.HasOne("Domain.Entities.Commande", "Commande")
                        .WithMany("details")
                        .HasForeignKey("CommandeDetail_CommandeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("CommandeDetail_FormeProduitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("CommandeDetail_UniteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Demande", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("Demande_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.BonDeSortie", "BonDe_Sortie")
                        .WithMany()
                        .HasForeignKey("Demande_BonDeSortieID");

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("Demande_LieuStockageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.PlanificationJournee", "Planification_Journee")
                        .WithMany()
                        .HasForeignKey("Demande_PlanificationID");
                });

            modelBuilder.Entity("Domain.Entities.Demande_Pret", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("DemandePret_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("DemandePret_StockID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.DemandePret_Details", b =>
                {
                    b.HasOne("Domain.Entities.Demande_Pret", "Demande_Pret")
                        .WithMany("details")
                        .HasForeignKey("DemandePretDetails_DemandeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("DemandePretDetails_FormeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPretConsomer", "Produit_PretConsomer")
                        .WithMany()
                        .HasForeignKey("DemandePretDetails_ProduitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("DemandePretDetails_UniteMesureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.DetailsProduction", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("ProductionDetails_FormeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.PackageProduction", "Package_Production")
                        .WithMany()
                        .HasForeignKey("ProductionDetails_ProductionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.DetailsProduitAppro", b =>
                {
                    b.HasOne("Domain.Entities.ProduitAppro", "ProduitAppro")
                        .WithMany()
                        .HasForeignKey("DetailsProduitAppro_ProduitApproID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Echange_Produits", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("EchangeProduits_AdminID");

                    b.HasOne("Domain.Entities.Point_Vente", "FournisseurPdv")
                        .WithMany()
                        .HasForeignKey("EchangeProduits_PdvFournisseurID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Point_Vente", "ReceptionPdv")
                        .WithMany()
                        .HasForeignKey("EchangeProduits_PdvRecepID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.EchangeProduit_Details", b =>
                {
                    b.HasOne("Domain.Entities.Echange_Produits", "Echange_Produits")
                        .WithMany("details")
                        .HasForeignKey("EchangeProduitDetails_EchangeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("EchangeProduitDetails_FromeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("EchangeProduitDetails_UniteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Facture", b =>
                {
                    b.HasOne("Domain.Entities.BonDeCommande", "bonDeCommande")
                        .WithMany()
                        .HasForeignKey("Facture_BonDeCommandeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Fournisseur", "Fournisseur")
                        .WithMany()
                        .HasForeignKey("Facture_FournisseurID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.FicheForme", b =>
                {
                    b.HasOne("Domain.Entities.FicheTechniqueBridge", "FicheTechnique_Bridge")
                        .WithMany("Fiche_Forme")
                        .HasForeignKey("FicheForme_FicheBridge")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("FicheForme_FormeProduit")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("FicheForme_uniteMesure")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.FicheTech_ProduitBase", b =>
                {
                    b.HasOne("Domain.Entities.FicheTechniqueBridge", "FicheTechnique_Bridge")
                        .WithMany("FicheTech_ProduitBase")
                        .HasForeignKey("FicheTech_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitBase", "ProduitBase")
                        .WithMany()
                        .HasForeignKey("ProduitBase_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("UniteMesure_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.FicheTechniqueBridge", b =>
                {
                    b.HasOne("Domain.Entities.ProduitVendable", "Produit_Vendable")
                        .WithMany()
                        .HasForeignKey("FicheTechniqueBridge_ProduitVendableID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.FicheTechniqueProduitBase", b =>
                {
                    b.HasOne("Domain.Entities.ProduitBase", "ProduitBase")
                        .WithMany()
                        .HasForeignKey("FicheTechniqueProduitBase_ProduitBaseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("FicheTechniqueProduitBase_UniteMesureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Forme_Produit", b =>
                {
                    b.HasOne("Domain.Entities.ProduitVendable", "Produit_Vendable")
                        .WithMany("formes")
                        .HasForeignKey("FormeProduit_ProduitID");

                    b.HasOne("Domain.Entities.ProduitPackage", "ProduitPackage")
                        .WithMany("formes")
                        .HasForeignKey("FormeProduit_ProduitPackageId");

                    b.HasOne("Domain.Entities.ProduitPretConsomer", "Produit_PretConsomer")
                        .WithMany("formes")
                        .HasForeignKey("FormeProduit_ProduitPretId");
                });

            modelBuilder.Entity("Domain.Entities.FormeDetails", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("FormeDetails_FormeProduitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany()
                        .HasForeignKey("FormeDetails_PointVenteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPackage", "ProduitPackage")
                        .WithMany()
                        .HasForeignKey("FormeDetails_ProduitPackageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Fournisseur", b =>
                {
                    b.HasOne("Domain.Entities.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("Founisseur_VilleID");
                });

            modelBuilder.Entity("Domain.Entities.Fournisseur_ProduitConso", b =>
                {
                    b.HasOne("Domain.Entities.FournisseurProduits", "Fournisseur_Produits")
                        .WithMany("ProduitConso_Link")
                        .HasForeignKey("FournisseurProduits_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPretConsomer", "Produit_PretConsomer")
                        .WithMany("Fournisseur_Link")
                        .HasForeignKey("ProduitConsomable_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.FournisseurContact", b =>
                {
                    b.HasOne("Domain.Entities.Fonction", "Fonction")
                        .WithMany()
                        .HasForeignKey("FournisseurContact_FonctionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Fournisseur", "Founisseur")
                        .WithMany("Fournisseur_Contact")
                        .HasForeignKey("FournisseurContact_FournisseurID");

                    b.HasOne("Domain.Entities.FournisseurProduits", "Fournisseur_Produits")
                        .WithMany("Fournisseur_Contact")
                        .HasForeignKey("FournisseurContact_FournisseurProduitID");
                });

            modelBuilder.Entity("Domain.Entities.FournisseurMatiere", b =>
                {
                    b.HasOne("Domain.Entities.Fournisseur", "Founisseur")
                        .WithMany("MatiereLink")
                        .HasForeignKey("Founisseur_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MatierePremiere", "Matiere_Premiere")
                        .WithMany("FournisseurLink")
                        .HasForeignKey("MatierePremiere_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.FournisseurProduits", b =>
                {
                    b.HasOne("Domain.Entities.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("FournisseurProduitConso_VilleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Gratuite", b =>
                {
                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany()
                        .HasForeignKey("Gratuite_PositionVente")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.GratuiteDetails", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("GratuiteDetails_FormeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Gratuite", "Gratuite")
                        .WithMany("details")
                        .HasForeignKey("GratuiteDetails_GratuiteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("GratuiteDetails_UniteVenteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Lieu_Stockage", b =>
                {
                    b.HasOne("Domain.Entities.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("LieuStockag_VilleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Matiere_Composants", b =>
                {
                    b.HasOne("Domain.Entities.MatierePremiere", "MatierePremiere")
                        .WithMany("Composants")
                        .HasForeignKey("MatiereComposants_MatiereID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Matiere_Transfert", b =>
                {
                    b.HasOne("Domain.Entities.MatierePremiere", "MatierePremiere")
                        .WithMany()
                        .HasForeignKey("MatiereTrans_MatiereID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("MatiereTrans_StockID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Transfert_Matiere", "Transfert_Matiere")
                        .WithMany("listeMatiere")
                        .HasForeignKey("MatiereTrans_TransferID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("MatiereTrans_UniteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.MatiereFamille", b =>
                {
                    b.HasOne("Domain.Entities.MatireFamille_Parent", "MatiereFamille_Parent")
                        .WithMany()
                        .HasForeignKey("MatiereFamille_ParentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.MatierePremiere", b =>
                {
                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("MatierePremiere_AchatUniteMesureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Taux_TVA", "Taux_TVA")
                        .WithMany()
                        .HasForeignKey("MatierePremiere_CoutTVAID");

                    b.HasOne("Domain.Entities.MatiereFamille", "Matiere_Famille")
                        .WithMany()
                        .HasForeignKey("MatierePremiere_FamilleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Stockage", "Forme_Stockage")
                        .WithMany()
                        .HasForeignKey("MatierePremiere_FormeStockageId");
                });

            modelBuilder.Entity("Domain.Entities.MatierePremiereStockage", b =>
                {
                    b.HasOne("Domain.Entities.MatierePremiere", "Matiere_Premiere")
                        .WithMany()
                        .HasForeignKey("MatierePremiereStokage_MatierePremiereId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Section_Stockage", "Section_Stockage")
                        .WithMany()
                        .HasForeignKey("MatierePremiereStokage_SectionStockageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.MatiereStock_Atelier", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("MatiereStockAtelier_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MatierePremiere", "Matiere_Premiere")
                        .WithMany()
                        .HasForeignKey("MatiereStockAtelier_MatierePremiereID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.MatPrem_Allergene", b =>
                {
                    b.HasOne("Domain.Entities.Allergene", "Allgerene")
                        .WithMany("listMateires")
                        .HasForeignKey("AllergenID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MatierePremiere", "MatierePremiere")
                        .WithMany("listAllergene")
                        .HasForeignKey("MatiereID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.MouvementCaisse", b =>
                {
                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany()
                        .HasForeignKey("MouvementsCaisse_PositionVenteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MouvementCaisse_Type", "MouvementCaisse_Type")
                        .WithMany()
                        .HasForeignKey("MouvementsCaisse_TypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.MouvementProduitsConso", b =>
                {
                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("MouvementProduitsConso_FournisseurProduitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MouvementType", "Mouvement_Type")
                        .WithMany()
                        .HasForeignKey("MouvementProduitsConso_MouvementType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitConsomableStokage", "ProduitConsomable_Stokage")
                        .WithMany()
                        .HasForeignKey("MouvementProduitsConso_ProduitConsoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany()
                        .HasForeignKey("MouvementProduitsConso_StockFournisseurId");

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("MouvementProduitsConso_UniteMesureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.MouvementStock", b =>
                {
                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("MouvementStock_DestinationStockId");

                    b.HasOne("Domain.Entities.Fournisseur", "Founisseur")
                        .WithMany()
                        .HasForeignKey("MouvementStock_FournisseurId");

                    b.HasOne("Domain.Entities.MatierePremiereStockage", "MatierePremiere_Stokage")
                        .WithMany()
                        .HasForeignKey("MouvementStock_MatierePremiereStokageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MouvementType", "Mouvement_Type")
                        .WithMany()
                        .HasForeignKey("MouvementStock_MouvementTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("MouvementStock_UniteMesureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Package_Forme", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("PackageForme_FormeProduitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPackage", "ProduitPackage")
                        .WithMany()
                        .HasForeignKey("PackageForme_ProduitPackageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PackageForme_Details", b =>
                {
                    b.HasOne("Domain.Entities.Package_Forme", "Package_Forme")
                        .WithMany("details")
                        .HasForeignKey("PackageFormeDetails_PackageFormeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Sous_ProduitPackage", "Sous_ProduitPackage")
                        .WithMany()
                        .HasForeignKey("PackageFormeDetails_SousProduitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PackageFormeDetails_Matiere", b =>
                {
                    b.HasOne("Domain.Entities.Package_Forme", "Package_Forme")
                        .WithMany("detailsMatiere")
                        .HasForeignKey("PackageFormeDetailsMatiere_PackageFormeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.SousMatierePackage", "SousMatierePackage")
                        .WithMany()
                        .HasForeignKey("PackageFormeDetailsMatiere_SousMatiereID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("PackageFormeDetailsMatiere_UniteMesureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PackageProduction", b =>
                {
                    b.HasOne("Domain.Entities.ProduitPackage", "ProduitPackage")
                        .WithMany()
                        .HasForeignKey("PackageProduction_ProduitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("PackageProduction_ProduitPackageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Paiement_Abonnement", b =>
                {
                    b.HasOne("Domain.Entities.Abonnement_Client", "Abonnemet_Client")
                        .WithMany()
                        .HasForeignKey("PaiementAbonnement_AbonnementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany()
                        .HasForeignKey("PaiementAbonnement_PointVenteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Payement_Facture", b =>
                {
                    b.HasOne("Domain.Entities.Facture", "Facture")
                        .WithMany("listePaiement")
                        .HasForeignKey("PayementFacture_FactureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PdV_ProduitsPret", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("PdV_ProduitsPret_FormeProduitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany()
                        .HasForeignKey("PdV_ProduitsPret_PointVenteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPretConsomer", "Produit_PretConsomer")
                        .WithMany()
                        .HasForeignKey("PdV_ProduitsPret_ProduitConsomableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Perte", b =>
                {
                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany()
                        .HasForeignKey("Perte_PositionVenteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Perte_Matiere", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("PerteMatiere_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MatiereStock_Atelier", "matiereStock_Atelier")
                        .WithMany()
                        .HasForeignKey("PerteMatiere_MatierePremiereStockageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("PerteMatiere_UniteMesureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Perte_MatiereStock", b =>
                {
                    b.HasOne("Domain.Entities.MatierePremiereStockage", "MatierePremiere_Stokage")
                        .WithMany()
                        .HasForeignKey("PerteMatiere_MatierePremiereStockageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("PerteMatiere_StockID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("PerteMatiere_UniteMesureID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Authentication.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("PerteMatiere_Utilisateur");
                });

            modelBuilder.Entity("Domain.Entities.Perte_Pret", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("PertePret_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPret_Atelier", "ProduitPret_Atelier")
                        .WithMany()
                        .HasForeignKey("PertePret_ProduitPretAtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("PertePret_UniteMesureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PerteDetails", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("PerteDetails_FormeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Perte", "Perte")
                        .WithMany("details")
                        .HasForeignKey("PerteDetails_PerteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("PerteDetails_UniteVenteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Planification_ProdBase", b =>
                {
                    b.HasOne("Domain.Entities.PlanificationJournee", "Planification_Journee")
                        .WithMany()
                        .HasForeignKey("PlanificationProdBase_PlanificationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitBase", "ProduitBase")
                        .WithMany()
                        .HasForeignKey("PlanificationProdBase_ProdBaseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PlanificationdeProduction", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("PlanificationProduction_FormeProduitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.PlanificationJournee", "Planification_Journee")
                        .WithMany("Planification_Production")
                        .HasForeignKey("PlanificationProduction_PlanificationJourneeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitVendable", "Produit_Vendable")
                        .WithMany()
                        .HasForeignKey("PlanificationProduction_ProduitVendableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PlanificationdeProductionBase", b =>
                {
                    b.HasOne("Domain.Entities.PlanificationJourneeBase", "Planification_JourneeBase")
                        .WithMany("Planification_ProductionBase")
                        .HasForeignKey("PlanificationProductionBase_PlanificationJourneeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitBase", "ProduitBase")
                        .WithMany()
                        .HasForeignKey("PlanificationProductionBase_ProduitBase")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PlanificationJournee", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("PlanificationJournee_AtelierID");

                    b.HasOne("Domain.Entities.BonDeSortie", "BonDe_Sortie")
                        .WithMany()
                        .HasForeignKey("PlanificationJournee_BonDeSortieID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("PlanificationJournee_LieuStockageID");
                });

            modelBuilder.Entity("Domain.Entities.PlanificationJourneeBase", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("PlanificationJourneeBase_AtelierID");

                    b.HasOne("Domain.Entities.BonDeSortie", "BonDe_Sortie")
                        .WithMany()
                        .HasForeignKey("PlanificationJourneeBase_BonDeSortieID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("PlanificationJourneeBase_LieuStockageID");
                });

            modelBuilder.Entity("Domain.Entities.Point_Vente", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("PointVente_AtelierID");

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("PointVente_StockID");

                    b.HasOne("Domain.Entities.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("PointVente_VilleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PointPorduction_Famille", b =>
                {
                    b.HasOne("Domain.Entities.FamilleProduit", "Famille_Produit")
                        .WithMany("production_Link")
                        .HasForeignKey("FamilleProduit_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("PointProduction_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PointVente_Famille", b =>
                {
                    b.HasOne("Domain.Entities.FamilleProduit", "Famille_Produit")
                        .WithMany("PointVente_Link")
                        .HasForeignKey("FamilleProduit_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany("Famille_Link")
                        .HasForeignKey("PointVente_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PointVente_Stock", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("PointVenteStock_FormeProduitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany()
                        .HasForeignKey("PointVenteStock_PointVenteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitVendable", "Produit_Vendable")
                        .WithMany()
                        .HasForeignKey("PointVenteStock_ProduitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PointVente_User", b =>
                {
                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany()
                        .HasForeignKey("PointVente_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Authentication.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("User_Id");
                });

            modelBuilder.Entity("Domain.Entities.PositionVente", b =>
                {
                    b.HasOne("Domain.Entities.ModePaiement", "Mode_Paiement")
                        .WithMany()
                        .HasForeignKey("PositionVente_ModePaiementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany("PositionsVente")
                        .HasForeignKey("PositionVente_PointVenteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PrixProduit", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("PrixProduit_FormeProduitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ProdBase_Atelier", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("ProdBase_Atelier_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitBase", "ProduitBase")
                        .WithMany()
                        .HasForeignKey("ProdBase_Atelier_ProduitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Produit_Composants", b =>
                {
                    b.HasOne("Domain.Entities.ProduitVendable", "ProduitVendable")
                        .WithMany("Composants")
                        .HasForeignKey("ProduitComposant_ProduitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ProduitAppro", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("ProduitAppro_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("ProduitAppro_FormeProduitID");

                    b.HasOne("Domain.Entities.ProduitVendable", "Produit_Vendable")
                        .WithMany()
                        .HasForeignKey("ProduitAppro_ProduitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ProduitBase", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Stockage", "Forme_Stockage")
                        .WithMany()
                        .HasForeignKey("ProduitBase_FormeStockageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ProduitBase_UniteMesureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ProduitBaseFicheTechnique", b =>
                {
                    b.HasOne("Domain.Entities.FicheTechniqueProduitBase", "FicheTechniqueProduitBase")
                        .WithMany("ProduitBase_FicheTechnique")
                        .HasForeignKey("ProduitBaseFicheTechnique_FicheTehcniqueProduitBaseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MatierePremiere", "Matiere_Premiere")
                        .WithMany()
                        .HasForeignKey("ProduitBaseFicheTechnique_MatierePremiereID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ProduitBaseFicheTechnique_UniteMesureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ProduitConsomableStokage", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("ProduitConsomableStokage_FormeProduitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("ProduitConsomableStokage_LieuStockID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPretConsomer", "Produit_PretConsomer")
                        .WithMany()
                        .HasForeignKey("ProduitConsomableStokage_ProduitVendableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ProduitFicheTechnique", b =>
                {
                    b.HasOne("Domain.Entities.FicheTechniqueBridge", "FicheTechnique_Bridge")
                        .WithMany("Produit_FicheTechnique")
                        .HasForeignKey("FicheTechnique_FicheTechniqueBridgeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MatierePremiere", "Matiere_Premiere")
                        .WithMany()
                        .HasForeignKey("FicheTechnique_MatierePremiereId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitVendable", "Produit_Vendable")
                        .WithMany()
                        .HasForeignKey("FicheTechnique_ProduitVendableId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("FicheTechnique_UniteMesureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ProduitPack_Atelier", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("ProduitPackAtelier_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("ProduitPackAtelier_FormeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPackage", "ProduitPackage")
                        .WithMany()
                        .HasForeignKey("ProduitPackAtelier_ProduitPackID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ProduitPackage", b =>
                {
                    b.HasOne("Domain.Entities.SousFamille", "Sous_Famille")
                        .WithMany()
                        .HasForeignKey("ProduitPackage_FamilleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ProduitPackage_UniteVente")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ProduitPret_Atelier", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("ProduitPretAtelier_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("ProduitPretAtelier_FormeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPretConsomer", "Produit_PretConsomer")
                        .WithMany()
                        .HasForeignKey("ProduitPretAtelier__ProduitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ProduitPretConsomer", b =>
                {
                    b.HasOne("Domain.Entities.SousFamille", "Sous_Famille")
                        .WithMany()
                        .HasForeignKey("ProduitPretConsomer_FamilleProduit")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Stockage", "Forme_Stockage")
                        .WithMany()
                        .HasForeignKey("ProduitPretConsomer_FormeStockageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ProduitPretConsomer_UniteMesureAchatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.ProduitVendable", b =>
                {
                    b.HasOne("Domain.Entities.SousFamille", "Sous_Famille")
                        .WithMany()
                        .HasForeignKey("ProduitVendable_FamilleProduitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Forme_Stockage", "Forme_Stockage")
                        .WithMany()
                        .HasForeignKey("ProduitVendable_FormStockageId");

                    b.HasOne("Domain.Entities.Taux_TVA", "Taux_TVA")
                        .WithMany()
                        .HasForeignKey("ProduitVendable_TvaId");

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ProduitVendable_UniteMesureId");
                });

            modelBuilder.Entity("Domain.Entities.Reception_Stock", b =>
                {
                    b.HasOne("Domain.Entities.Atelier", "Atelier")
                        .WithMany()
                        .HasForeignKey("ReceptionStock_AtelierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.MatierePremiereStockage", "MatierePremiere_Stokage")
                        .WithMany()
                        .HasForeignKey("ReceptionStock_MatiereID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("ReceptionStock_StockID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ReceptionStock_UniteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Retour_Details", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("RetourDetails_FormeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.RetourProduits", "Retour_Produit")
                        .WithMany("retourDetails")
                        .HasForeignKey("RetourDetails_RetourID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("RetourDetails_UniteVente")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.RetourProduits", b =>
                {
                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany()
                        .HasForeignKey("Retour_PositionVenteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.RetourStock", b =>
                {
                    b.HasOne("Domain.Entities.BonDeSortie", "BonDe_Sortie")
                        .WithMany()
                        .HasForeignKey("RetourStok_BonDeSortieID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.PlanificationJournee", "Planification_Journee")
                        .WithMany()
                        .HasForeignKey("RetourStok_PlanificationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.RetraitCaisse", b =>
                {
                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany()
                        .HasForeignKey("RetraitCaisse_PositionVenteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.RetraitType", "Retrait_Type")
                        .WithMany()
                        .HasForeignKey("RetraitCaisse_TypeRetraitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Authentication.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("RetraitCaisse_UtilisateurID");
                });

            modelBuilder.Entity("Domain.Entities.Salle", b =>
                {
                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany("Salles")
                        .HasForeignKey("Salle_PositionVenteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Section_Stockage", b =>
                {
                    b.HasOne("Domain.Entities.Zone_Stockage", "Zone_Stockage")
                        .WithMany("Section_Stockage")
                        .HasForeignKey("Section_ZoneStockageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Sous_ProduitPackage", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("SousProduitPackage_FormeProduittID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPackage", "ProduitPackage")
                        .WithMany("Sous_ProduitPackage")
                        .HasForeignKey("SousProduitPackage_ProduitPackageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.SousFamille", b =>
                {
                    b.HasOne("Domain.Entities.FamilleProduit", "Famille_Produit")
                        .WithMany("sousFamille")
                        .HasForeignKey("SousFamille_ParentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.SousMatierePackage", b =>
                {
                    b.HasOne("Domain.Entities.MatierePremiere", "Matiere_Premiere")
                        .WithMany()
                        .HasForeignKey("SousMatierePackage_MatiereID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProduitPackage", "ProduitPackage")
                        .WithMany("SousMatierePackages")
                        .HasForeignKey("SousMatierePackage_ProduitPackageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Stock_Achat", b =>
                {
                    b.HasOne("Domain.Entities.MatierePremiere", "MatierePremiere")
                        .WithMany()
                        .HasForeignKey("StockAchat_MatiereID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("StockAchat_UniteMesureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Stock_User", b =>
                {
                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany()
                        .HasForeignKey("Stock_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Authentication.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("User_Id");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.HasOne("Domain.Entities.Salle", "Salle")
                        .WithMany("Tables")
                        .HasForeignKey("Table_SalleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Tva", b =>
                {
                    b.HasOne("Domain.Entities.Commande")
                        .WithMany("Tva")
                        .HasForeignKey("commande_ID");

                    b.HasOne("Domain.Entities.Vente")
                        .WithMany("Tva")
                        .HasForeignKey("vente_ID");
                });

            modelBuilder.Entity("Domain.Entities.Unite_MesureMatiere", b =>
                {
                    b.HasOne("Domain.Entities.MatierePremiere", "Matiere_Premiere")
                        .WithMany("unites_Utilisation")
                        .HasForeignKey("MatierePremiere_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany("matiereLink")
                        .HasForeignKey("Unite_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.UniteMesure_ProdBase", b =>
                {
                    b.HasOne("Domain.Entities.ProduitBase", "ProduitBase")
                        .WithMany("unites_Utilisation")
                        .HasForeignKey("ProduitBase_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("UniteMesure_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Vente", b =>
                {
                    b.HasOne("Domain.Entities.ModePaiement", "Mode_Paiement")
                        .WithMany()
                        .HasForeignKey("Vente_ModePaiement")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Point_Vente", "Point_Vente")
                        .WithMany()
                        .HasForeignKey("Vente_PointVenteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.PositionVente", "Position_Vente")
                        .WithMany()
                        .HasForeignKey("Vente_PositionVenteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.VenteDetails", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Produit", "Forme_Produit")
                        .WithMany()
                        .HasForeignKey("VenteDetails_FormeProduitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("VenteDetails_UniteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Vente", "Vente")
                        .WithMany("Details")
                        .HasForeignKey("VenteDetails_VentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Zone_Stockage", b =>
                {
                    b.HasOne("Domain.Entities.Forme_Stockage", "Forme_Stockage")
                        .WithMany()
                        .HasForeignKey("ZoneStockage_FormeStockageId");

                    b.HasOne("Domain.Entities.Lieu_Stockage", "Lieu_Stockage")
                        .WithMany("Zone_Stockage")
                        .HasForeignKey("ZoneStockage_LieuStockageId");

                    b.HasOne("Domain.Entities.Type_Contenu", "Type_Contenu")
                        .WithMany()
                        .HasForeignKey("ZoneStockage_TypeContenuId");

                    b.HasOne("Domain.Entities.Unite_Mesure", "Unite_Mesure")
                        .WithMany()
                        .HasForeignKey("ZoneStockage_UniteMesureId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
